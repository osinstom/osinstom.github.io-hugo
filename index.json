[{"authors":["admin"],"categories":null,"content":"My name is Tomek Osiński and I\u0026rsquo;m the author of this blog. The blog is full of networking topics, which I find interesting and worth to share with community. Mainly, I am going to publish tech tutorials \u0026amp; reports. However, some of my personal opinions or visions may also appear on this blog. Note that the posts are on my own and don\u0026rsquo;t represent the opinions of my employer.\nI\u0026rsquo;m a R\u0026amp;D Software Engineer in the area of Software-Defined Networking \u0026amp; Network Functions Virtualization and also an Open-Source enthusiast. My R\u0026amp;D activities are related to network softwarization including network automation \u0026amp; orchestration, Software-Defined Infrastructure (i.a. SDN), Network Function Virtualization (NFV), Network Slicing, mobile networks and Telco Cloud technologies. Currently, my research is focused on improving the performance of the NFV workload, therefore I deal with data plane programmability and packet processing techniques for SDN and NFV systems. I\u0026rsquo;m involved in the project related to the P4 technology and OpenStack. So far, I have been contributing to various open-source projects including Floodlight, ONOS and ONAP.\nProfessionally, I work as a R\u0026amp;D Expert at Orange Labs Poland. Moreover, I am a PhD student at Warsaw University of Technology and the member of SDN and Network Virtualization Lab.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://osinstom.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"My name is Tomek Osiński and I\u0026rsquo;m the author of this blog. The blog is full of networking topics, which I find interesting and worth to share with community. Mainly, I am going to publish tech tutorials \u0026amp; reports. However, some of my personal opinions or visions may also appear on this blog. Note that the posts are on my own and don\u0026rsquo;t represent the opinions of my employer.\nI\u0026rsquo;m a R\u0026amp;D Software Engineer in the area of Software-Defined Networking \u0026amp; Network Functions Virtualization and also an Open-Source enthusiast.","tags":null,"title":"Tomasz Osiński","type":"authors"},{"authors":["Tomasz Osinski","Mateusz Kossakowski","Halina Tarasiuk","Roland Picard"],"categories":null,"content":"","date":1569196800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569196800,"objectID":"3d41527624173c2e7109037b48585f5d","permalink":"https://osinstom.github.io/publication/ancs2019/","publishdate":"2019-09-23T00:00:00Z","relpermalink":"/publication/ancs2019/","section":"publication","summary":"","tags":null,"title":"Offloading data plane functions to the multi-tenant cloud infrastructure using P4","type":"publication"},{"authors":["Tomasz Osinski","Mateusz Kossakowski"],"categories":null,"content":"","date":1569196800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569196800,"objectID":"d769bc0e4fe1569c67c3be53e7ccbf34","permalink":"https://osinstom.github.io/talk/europ4/","publishdate":"2019-09-23T00:00:00Z","relpermalink":"/talk/europ4/","section":"talk","summary":"","tags":[],"title":"Offloading data plane functions to the multi-tenant cloud infrastructure using P4","type":"talk"},{"authors":null,"categories":null,"content":"Currently, as my PhD topic, I do a research on P4 language and related technologies (e.g. eBPF/XDP, VPP, OVS, SmartNiC, Tofino) in order to explore a way to implement a VNF offloading framework for OpenStack.\n","date":1568419200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568419200,"objectID":"1cdbab313159d816b222a7048b3eedd9","permalink":"https://osinstom.github.io/project/p4-vnf-phd/","publishdate":"2019-09-14T00:00:00Z","relpermalink":"/project/p4-vnf-phd/","section":"project","summary":"Currently, as my PhD topic, I do a research on P4 language and related technologies (e.g. eBPF/XDP, VPP, OVS, SmartNiC, Tofino) in order to explore a way to implement a VNF offloading framework for OpenStack.","tags":["SDN"],"title":"Research on the VNF offloading using P4 technology","type":"project"},{"authors":null,"categories":null,"content":" Introduction Recently, I started to implement the support for packet tunneling in our P4C-to-uBPF compiler. However, in order to deeply understand P4 constructs describing tunneling I have created the reference implementation of the VXLAN tunneling for BMv2 switch.\nThis blog post describes how to design and implement more complex tunneling technique (like VXLAN) in the P4 language. The source code is available on Github.\nShort introduction to VXLAN The VXLAN (Virtual eXtensible Local Area Network) protocol has been standardized in RFC 7348 and is usually used to provide overlay communications between virtual machines in the multi-tenant virtualized data center. It isolates logically networks by using Virtual Network Identifier (VNI). The VNI uniquely identifies a Network Segment or, interchangeably, VXLAN Overlay Network. For more information on how VXLAN works visit these references:\nhttps://sites.google.com/site/amitsciscozone/home/data-center/vxlan\nhttps://medium.com/@NTTICT/vxlan-explained-930cc825a51\nRFC 7348\nDesign and implementation of VXLAN in P4 In this section I describe more interesting parts of the P4 program. The P4 source code is divided into header.p4, parser.p4 and vxlan.p4.\nHeaders This P4 program will use four types of headers: Ethernet, IP, UDP and VXLAN. The VXLAN header is defined as follows:\nheader vxlan_t { bit\u0026lt;8\u0026gt; flags; bit\u0026lt;24\u0026gt; reserved; bit\u0026lt;24\u0026gt; vni; bit\u0026lt;8\u0026gt; reserved_2; }  In fact, in this example only VNI will be used, the rest of fields will be set to zero.\nParser When implementing VXLAN tunneling we need to have more complex parsing logic in order to parse properly packets that arrive encapsulated into VXLAN header. For such packets the parser need to handle outer Ethernet, IP, UDP and VXLAN headers and the inner Ethernet and IP headers. Therefore, the implementation looks as follows:\n#define UDP_PORT_VXLAN 4789 #define UDP_PROTO 17 #define IPV4_ETHTYPE 0x800 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) { state start { transition parse_ethernet; } state parse_ethernet { packet.extract(hdr.ethernet); transition select(hdr.ethernet.etherType) { IPV4_ETHTYPE: parse_ipv4; default: accept; } } state parse_ipv4 { packet.extract(hdr.ipv4); transition select(hdr.ipv4.protocol) { UDP_PROTO: parse_udp; default: accept; } } state parse_udp { packet.extract(hdr.udp); transition select(hdr.udp.dstPort) { UDP_PORT_VXLAN: parse_vxlan; default: accept; } } state parse_vxlan { packet.extract(hdr.vxlan); transition parse_inner_ethernet; } state parse_inner_ethernet { packet.extract(hdr.inner_ethernet); transition select(hdr.ethernet.etherType) { IPV4_ETHTYPE: parse_inner_ipv4; default: accept; } } state parse_inner_ipv4 { packet.extract(hdr.inner_ipv4); transition accept; } } control DeparserImpl(packet_out packet, in headers hdr) { apply { packet.emit(hdr.ethernet); packet.emit(hdr.ipv4); packet.emit(hdr.udp); packet.emit(hdr.vxlan); packet.emit(hdr.inner_ethernet); packet.emit(hdr.inner_ipv4); } } control verifyChecksum(inout headers hdr, inout metadata meta) { apply { } } control computeChecksum(inout headers hdr, inout metadata meta) { apply { } }  The parser distinguish if the packet is encapsulated in VXLAN based on the UDP destination port, which should be set to 4789, which is the standard port for VXLAN encapsulation. Then if the packet is encapsulated parser goes through following stages: parse_vxlan() -\u0026gt; parse_inner_ethernet() -\u0026gt; parse_inner_ipv4().\nIn the same file I have implemented deparser, which defines the order, in which headers are written to packets at the egress.\nControl blocks It is a good practice to design P4 programs (especially those that perform tunneling) by dividing the P4 program into four functional blocks:\n Upstream ingress - ingress control block for incoming encapsulated packets. Upstream egress - egress control block for outgoing packets, that arrived as encapsulated. Downstream ingress - control block for incoming raw (not encapsulated) packets. Downstream egress - control block for outgoing packets, that arrived as not encapsulated.  Upstream and downstreams terms refer to the direction of the traffic. The upstream traffic is the traffic that is encapsulated (traffic being sent between VXLAN endpoints) and should be decapsulated at the ingress. On the contrary, the downstream traffic is the traffic, which is not encapsulated yet (traffic from host to switch). It simplify thinking of the P4 program design.\nUpstream ingress The upstream ingress needs to validate the VXLAN header and strip it out. Moreover, it must perform L2 forwarding to send the decapsulated packet.\ncontrol vxlan_ingress_upstream(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) { action vxlan_decap() { // as simple as set outer headers as invalid hdr.ethernet.setInvalid(); hdr.ipv4.setInvalid(); hdr.udp.setInvalid(); hdr.vxlan.setInvalid(); } table t_vxlan_term { key = { // Inner Ethernet desintation MAC address of target VM hdr.inner_ethernet.dstAddr : exact; } actions = { @defaultonly NoAction; vxlan_decap(); } } action forward(bit\u0026lt;9\u0026gt; port) { standard_metadata.egress_spec = port; } table t_forward_l2 { key = { hdr.inner_ethernet.dstAddr : exact; } actions = { forward; } } apply { if (hdr.ipv4.isValid()) { if (t_vxlan_term.apply().hit) { t_forward_l2.apply(); } } } }  It is implemented in the vxlan_ingress_upstream control block using two tables: t_vxlan_term and t_forward_l2. The former decapsulates packets that matches the key. The destination MAC address of the inner Ethernet header should point to the host that is directly connected to VXLAN endpoint (the switch) via Layer 2 network. Encapsulation action sets outer headers as invalid, so that the deparser knows not to put these headers in the output packet. If the t_vxlan_term is hit, the t_forward_l2 is responsible for forwarding packet based on the destination MAC address of the inner Ethernet header.\nUpstream egress In the context of VXLAN processing the upstream egress block does not need to do anything.\nDownstream ingress The downstream ingress is responsible for determining the value of the VNI identifier that will be used to encapsulate L2 packet by the downstream egress. Moreover, it determines source IP address and next hop IP address for the encapsulated packets. It also performs routing for encapsulates packets.\ncontrol vxlan_ingress_downstream(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) { action set_vni(bit\u0026lt;24\u0026gt; vni) { meta.vxlan_vni = vni; } action set_ipv4_nexthop(bit\u0026lt;32\u0026gt; nexthop) { meta.nexthop = nexthop; } table t_vxlan_segment { key = { hdr.ipv4.dstAddr : lpm; } actions = { @defaultonly NoAction; set_vni; } } table t_vxlan_nexthop { key = { hdr.ethernet.dstAddr : exact; } actions = { set_ipv4_nexthop; } } action set_vtep_ip(bit\u0026lt;32\u0026gt; vtep_ip) { meta.vtepIP = vtep_ip; } table t_vtep { key = { hdr.ethernet.srcAddr : exact; } actions = { set_vtep_ip; } } action route(bit\u0026lt;9\u0026gt; port) { standard_metadata.egress_spec = port; } table t_vxlan_routing { key = { meta.nexthop : exact; } actions = { route; } } apply { if (hdr.ipv4.isValid()) { t_vtep.apply(); if(t_vxlan_segment.apply().hit) { if(t_vxlan_nexthop.apply().hit) { t_vxlan_routing.apply(); } } } } }  The apply method firsty invokes t_vtep table, which determines source IP address for encapsulated packets based on source MAC address. The source MAC address is the address of the host that is directly connected to the VXLAN endpoint (switch). Then, the control block determines VXLAN Segment ID (the value of VNI) based on the IP subnet mask. Each IP subnet gets unique VNI. If the VXLAN Segment ID is found the next hop IP address is determined. It would be the IP address of the peer VXLAN endpoint. Finally, the P4 enforce to determine output port for packet at the ingress pipeline. Thus, t_vxlan_routing table determines output port based on the next hop IP address. At this moment, everything is prepared to encapsulate packet and send it out in the downstream egress block.\nDownstream egress If the VNI has been determined in the ingress downstream block the downstream egress block just encapsulates the packet and sends the L2 frame.\ncontrol vxlan_egress_downstream(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) { action rewrite_macs(bit\u0026lt;48\u0026gt; smac, bit\u0026lt;48\u0026gt; dmac) { hdr.ethernet.srcAddr = smac; hdr.ethernet.dstAddr = dmac; } table t_send_frame { key = { hdr.ipv4.dstAddr : exact; } actions = { rewrite_macs; } } action vxlan_encap() { hdr.inner_ethernet = hdr.ethernet; hdr.inner_ipv4 = hdr.ipv4; hdr.ethernet.setValid(); hdr.ipv4.setValid(); hdr.ipv4.version = IP_VERSION_4; hdr.ipv4.ihl = IPV4_MIN_IHL; hdr.ipv4.diffserv = 0; hdr.ipv4.totalLen = hdr.ipv4.totalLen + (ETH_HDR_SIZE + IPV4_HDR_SIZE + UDP_HDR_SIZE + VXLAN_HDR_SIZE); hdr.ipv4.identification = 0x1513; /* From NGIC */ hdr.ipv4.flags = 0; hdr.ipv4.fragOffset = 0; hdr.ipv4.ttl = 64; hdr.ipv4.protocol = UDP_PROTO; hdr.ipv4.dstAddr = meta.nexthop; hdr.ipv4.srcAddr = meta.vtepIP; hdr.ipv4.hdrChecksum = 0; hdr.udp.setValid(); // The VTEP calculates the source port by performing the hash of the inner Ethernet frame's header. hash(hdr.udp.srcPort, HashAlgorithm.crc16, (bit\u0026lt;13\u0026gt;)0, { hdr.inner_ethernet }, (bit\u0026lt;32\u0026gt;)65536); hdr.udp.dstPort = UDP_PORT_VXLAN; hdr.udp.length = hdr.ipv4.totalLen + (UDP_HDR_SIZE + VXLAN_HDR_SIZE); hdr.udp.checksum = 0; hdr.vxlan.setValid(); hdr.vxlan.reserved = 0; hdr.vxlan.reserved_2 = 0; hdr.vxlan.flags = 0; hdr.vxlan.vni = meta.vxlan_vni; } apply { if (meta.vxlan_vni != 0) { vxlan_encap(); if (hdr.vxlan.isValid()) { t_send_frame.apply(); } } } }  However, the vxlan_encap() action is quite complex. Firsty, it copies the contenct of Ethernet and IP headers to the inner Ethernet and IP headers so it will act as a packet payload now. Then, outer headers (Ethernet, IP, UDP and VXLAN) are set valid and their header\u0026rsquo;s fields are filled. For the outer IP header the destination IP address is taken from nexthop value, which is stored in metadata. Similarily, the source IP address is set to the IP address of the VXLAN endpoint. Furthermore, the UDP header is pushed. Note that the source UDP port is caluclated as a hash value of Ethernet header (according to specification).\nOnce the packet is encapsulated the MAC addresses of outer Ethernet header are set accordingly to the configuration of the switch interfaces.\nRunning example In order to run example I have used p4app, which is really nice and simple tool (based on Docker and Mininet) to test P4 programs. I have heard about p4app during the last IEEE NetSoft conference, good to be there!\nWe will use simple Mininet topology with two switches and two hosts. The test environment is described in the p4app manifest file. I had to write simple controller module to avoid setting up L3 configuration for hosts. I have also configured Mininet with staticArp(), so that I didn\u0026rsquo;t have to implement ARP handling mechanism for VXLAN endpoints. It requires more complex P4 logic and for the sake of simplicity I have omitted this part of VTEP\u0026rsquo;s functionality in the P4 program.\nRun the demo:\nsudo p4app run vxlan.p4app\nIt will start Mininet, install the VXLAN P4 program on the switches and configure flow rules for them.\nYou can test VXLAN encapsulation by sending some traffic (e.g. ping). By running tcpdump on the switch interfaces gives you insight on how packets are handled:\ns1-eth1\n11:14:54.689967 00:04:00:00:01:01 (oui Unknown) \u0026gt; 00:04:00:00:02:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.1 \u0026gt; 10.0.0.2: ICMP echo request, id 113, seq 23, length 64 11:14:54.692320 00:04:00:00:02:01 (oui Unknown) \u0026gt; 00:04:00:00:01:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.2 \u0026gt; 10.0.0.1: ICMP echo reply, id 113, seq 23, length 64  s1-eth2\n11:15:14.719712 00:aa:00:01:00:02 (oui Unknown) \u0026gt; 00:aa:00:02:00:03 (oui Unknown), ethertype IPv4 (0x0800), length 148: 192.168.11.1.58032 \u0026gt; 192.168.11.254.4789: VXLAN, flags [.] (0x00), vni 22 00:04:00:00:01:01 (oui Unknown) \u0026gt; 00:04:00:00:02:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.1 \u0026gt; 10.0.0.2: ICMP echo request, id 113, seq 43, length 64 11:15:14.720664 00:aa:00:02:00:03 (oui Unknown) \u0026gt; 00:aa:00:01:00:02 (oui Unknown), ethertype IPv4 (0x0800), length 148: 192.168.11.254.43328 \u0026gt; 192.168.11.1.4789: VXLAN, flags [.] (0x00), vni 22 00:04:00:00:02:01 (oui Unknown) \u0026gt; 00:04:00:00:01:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.2 \u0026gt; 10.0.0.1: ICMP echo reply, id 113, seq 43, length 64  s2-eth2\n11:15:14.719712 00:aa:00:01:00:02 (oui Unknown) \u0026gt; 00:aa:00:02:00:03 (oui Unknown), ethertype IPv4 (0x0800), length 148: 192.168.11.1.58032 \u0026gt; 192.168.11.254.4789: VXLAN, flags [.] (0x00), vni 22 00:04:00:00:01:01 (oui Unknown) \u0026gt; 00:04:00:00:02:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.1 \u0026gt; 10.0.0.2: ICMP echo request, id 113, seq 82, length 64 11:15:14.720664 00:aa:00:02:00:03 (oui Unknown) \u0026gt; 00:aa:00:01:00:02 (oui Unknown), ethertype IPv4 (0x0800), length 148: 192.168.11.254.43328 \u0026gt; 192.168.11.1.4789: VXLAN, flags [.] (0x00), vni 22 00:04:00:00:02:01 (oui Unknown) \u0026gt; 00:04:00:00:01:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.2 \u0026gt; 10.0.0.1: ICMP echo reply, id 113, seq 82, length 64  s2-eth1\n11:15:14.719712 00:04:00:00:01:01 (oui Unknown) \u0026gt; 00:04:00:00:02:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.1 \u0026gt; 10.0.0.2: ICMP echo request, id 113, seq 133, length 64 11:15:14.720664 00:04:00:00:02:01 (oui Unknown) \u0026gt; 00:04:00:00:01:01 (oui Unknown), ethertype IPv4 (0x0800), length 98: 10.0.0.2 \u0026gt; 10.0.0.1: ICMP echo reply, id 113, seq 133, length 64  Summary The P4 implementation of the more advanced tunneling techniques (like VXLAN) requires a bit more effort than more standard networking. The purpose of this tutorial was to show how to implement them properly in the P4 language. I really recommend to split control block into four parts implementing upstream ingress and egress and downstream ingress and egress, seperately. It is the good practice that should ease the programming of the complex P4 programs. Following the VXLAN example one can implement similar tunneling techniques such as GPRS Tunneling Protocol (GTP) or Network Virtualization using Generic Routing Encapsulation (NVGRE).\n","date":1565136000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565136000,"objectID":"615c874c4ef47ab82953c646d5edc8ef","permalink":"https://osinstom.github.io/post/2019-10-26-implementing-tunneling-techniques-in-p4-based-on-the-example-of-vxlan/","publishdate":"2019-08-07T00:00:00Z","relpermalink":"/post/2019-10-26-implementing-tunneling-techniques-in-p4-based-on-the-example-of-vxlan/","section":"post","summary":"Introduction Recently, I started to implement the support for packet tunneling in our P4C-to-uBPF compiler. However, in order to deeply understand P4 constructs describing tunneling I have created the reference implementation of the VXLAN tunneling for BMv2 switch.\nThis blog post describes how to design and implement more complex tunneling technique (like VXLAN) in the P4 language. The source code is available on Github.\nShort introduction to VXLAN The VXLAN (Virtual eXtensible Local Area Network) protocol has been standardized in RFC 7348 and is usually used to provide overlay communications between virtual machines in the multi-tenant virtualized data center.","tags":["SDN","VXLAN","P4","Data plane programmability","tunneling"],"title":"Implementing tunneling techniques in P4 based on the example of VXLAN","type":"post"},{"authors":["Tomasz Osinski","Halina Tarasiuk","Łukasz Rajewski","Emil Kowalczyk"],"categories":null,"content":"","date":1561507200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561507200,"objectID":"6df3858c52be4ef9c03f80f8432d6ae7","permalink":"https://osinstom.github.io/publication/netsoft2019/","publishdate":"2019-06-26T00:00:00Z","relpermalink":"/publication/netsoft2019/","section":"publication","summary":"","tags":null,"title":"DPPx: A P4-based Data Plane Programmability and Exposure framework to enhance NFV services","type":"publication"},{"authors":null,"categories":null,"content":" Recently, I work on a performance comparison between virtualization technologies. In order to made an experiment I had had to setup a test environment based on OVS-DPDK and KVM-based Virtual Machine. This user guide shows how to install and configure the test scenario with OVS-DPDK and libvirt. The test scenario is presented below. According to OVS flow rules configuration we can test PHY-OVS-PHY scenario (green line) or PHY-VM-PHY scenario (red line).\nPrerequisites Before starting installation of OVS-DPDK and VMs, let\u0026rsquo;s prepare OS.\nsudo apt-get update sudo apt-get upgrade sudo apt-get -y install git qemu-system-x86 python-pip fuse libfuse-dev dh-autoreconf openssl libssl-dev cmake libpcap-dev python-yaml libnuma-dev  Installing OVS-DPDK Firstly, we need to install DPDK and Open vSwitch from a source code. To install DPDK run below commands:\ncd $HOME \u0026amp; mkdir dpdk cd dpdk/ wget http://fast.dpdk.org/rel/dpdk-18.11.tar.xz tar xf dpdk-18.11.tar.xz cd dpdk-18.11/  Then, we need to export environment variables, which point out to DPDK..\nexport DPDK_DIR=$HOME/dpdk/dpdk-18.11 export DPDK_TARGET=x86_64-native-linuxapp-gcc export DPDK_BUILD=$DPDK_DIR/$DPDK_TARGET  .. and install DPDK. Note that we are using special flags (-g -Ofast -march=native -Q) to achieve a better performance of OVS-DPDK.\nEXTRA_CFLAGS=\u0026quot;-g -Ofast\u0026quot; make install -j T=$target CONFIG_RTE_BUILD_COMBINE_LIBS=y CONFIG_RTE_LIBRTE_VHOST=y DESTDIR=install\nIf the installation of DPDK has been successful, you can install OVS-DPDK.\ncd $HOME/dpdk/ git clone https://github.com/openvswitch/ovs cd ovs ./boot.sh ./configure CFLAGS=\u0026quot;-g -Ofast\u0026quot; --with-dpdk=$DPDK_BUILD make -j CFLAGS=\u0026quot;-g -Ofast -march=native -Q\u0026quot; sudo make install  Now, you should be able to verify OVS-DPDK installation by using below commands:\ntomek@s14-2:~$ sudo ovs-vsctl show 3bb620bf-4d6f-4ddc-94ff-03f1ff9ccc93  tomek@s14-2:~$ sudo ovs-vswitchd --version ovs-vswitchd (Open vSwitch) 2.11.90 DPDK 18.11.0  Configuring OVS-DPDK Firstly, let\u0026rsquo;s configure DPDK ports. Following commands inject required kernel driver (i.e. uio, igb_uio, vfio). It is up to you, which one you would like to use. In order to choose one refer to https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html. For our purposes we have used uiopcigeneric.\ncd dpdk/dpdk-18.11/usertools/ sudo modprobe uio_pci_generic  Once kernel module has been injected NICs can be attached to DPDK. Note that you need to use the bus-info format (e.g.0000:88:00.0). To retrieve NIC ID in the bus-info format use:\nlspci | grep Ethernet\nThis command will list all interfaces along with the bus-info identifier. Then, use dpdk-devbind.py script to bind chosen interfaces with DPDK drivers.\nsudo ./dpdk-devbind.py -b uio_pci_generic 0000:88:00.0 sudo ./dpdk-devbind.py -b uio_pci_generic 0000:88:00.1  You can check if interfaces have been bound successfully using:\ntomek@s14-2:~/dpdk/dpdk-18.11$ usertools/dpdk-devbind.py --status Network devices using DPDK-compatible driver ============================================ 0000:88:00.0 '82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb' drv=uio_pci_generic unused=ixgbe 0000:88:00.1 '82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb' drv=uio_pci_generic unused=ixgbe  Under \u0026ldquo;Network devices using DPDK-compatible driver\u0026rdquo; you should see the list of ports, which are already bound to the DPDK-compatible driver.\nOnce Ethernet interfaces have been bound to DPDK, it\u0026rsquo;s time to mount hugepages. Hugepages are contiguous regions - segments of physical memory. In order to allocate hugepages persistently I have added following parameters to GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub:\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026quot;default_hugepagesz=1G hugepagesz=1G hugepages=16 hugepagesz=2M hugepages=2048\u0026quot;\nThen, upgrade grub and reboot a machine:\nsudo update-grub sudo reboot  This configuration will take effect after every system reboot and will result in allocating 16 hugepages of the 1G size.\nAfter reboot, you need only to mount hugepages using:\nsudo mkdir -p /mnt/huge sudo mount -t hugetlbfs nodev /mnt/huge  To validate if hugepages has been allocated properly by:\ngrep -i huge /proc/meminfo\nThe number of free hugepages should be less than total number of available hugepages.\nGreat, the DPDK environment should be configured properly now. We can move to the configuration of OVS. Firstly initialize OVS brigde with DPDK capabilities:\nsudo ovs-vsctl --no-wait init sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true  The dpdk-init=true should be applied. To validate use below command, which should return the true value.\nsudo ovs-vsctl get Open_vSwitch . dpdk_initialized\nNow, we need to define other OVS parameters to be used by the DPDK ports. These are:\n other_config:dpdk-hugepage-dir - points to a directory, where hugepages are mounted. other_config:dpdk-socket-mem - a comma seperated list of hugepage memory, specified in MBs per NUMA node, allocated to the ovs-vswitchd to use for the DPDK dataplane other_config:dpdk-lcore-mask - a bitmask of what CPU core to pin to non-dataplane threads of the ovs-vswitchd to. other_config:pmd-cpu-mask - a bitmask of what CPU core to pin to the dataplane-related (Poll Mode Driver, PMD) threads of the ovs-vswitchd to. Each bit set in the bitmask result in the creating of the PMD thread. other_config:pmd-rxq-affinity - it is set per Interface. It pins a queue of port to the given CPU core. This parameter is optional, but in some circumstances it can be used to pin a queue of port to the specific CPU core.  The first two options are quite straightforward and can be configured with:\nsudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem=\u0026quot;4096M\u0026quot; sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-hugepage-dir=\u0026quot;/mnt/huge\u0026quot;  Now, to configure dpdk-lcore-mask and pmd-cpu-mask we need to find out how our server is configured. In particular, we need to know how many NUMA nodes our server has and how CPU cores are allocated across NUMA nodes.\nJust to clarify, NUMA stands for Non-Uniform Memory Access. In NUMA system memory is divided into zones called nodes, which are allocated to particular CPUs or sockets. Access to memory that is local to a CPU is faster than memory connected to remote CPUs on that system. Normally, each socket on a NUMA system has a local memory node whose contents can be accessed faster than the memory in the node local to another CPU or the memory on a bus shared by all CPUs.\nThus, in order to achieve better performance CPU cores used by OVS-DPDK should be located on the same NUMA node as DPDK ports. So, we configure OVS-DPDK with NUMA-awareness. In order to check NUMA topology on the server use:\nlscpu --- NUMA node0 CPU(s): 0-9,20-29 NUMA node1 CPU(s): 10-19,30-39  In our case we have two NUMA nodes (0 and 1). The CPU cores 0-9 and 20-29 are associated with NUMA node0, while the others are associated with NUMA node1.\nNow, for the physical ports (88:00.0 and 88:00.1 in our case), which will be connected to OVS-DPDK we should check the associated NUMA node:\ncat /sys/bus/pci/devices/0000:88:00.0/numa_node 1 cat /sys/bus/pci/devices/0000:88:00.1/numa_node 1  As our NICs are associated with the NUMA node 1 we should dedicate CPU cores in the same NUMA node to run PMD threads. From the lscpu command\u0026rsquo;s output we know we should use CPU cores from range 10-19 or 30-39. So, let\u0026rsquo;s configure remaining parameters (we don\u0026rsquo;t configure pmd-rxq-affinity):\nsudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-lcore-mask=\u0026quot;\u0026quot; sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:pmd-cpu-mask=\u0026quot;\u0026quot;  Once DPDK parameters for OVS are configured, let\u0026rsquo;s run OVS-DPDK bridge. To create OVS-DPDK bridge use type=netdev:\nsudo ovs-vsctl add-br br0 sudo ovs-vsctl set Bridge br0 datapath_type=netdev  And add physical ports to OVS-DPDK:\nsudo ovs-vsctl add-port br0 ens4f0 -- set Interface ens4f0 type=dpdk \\ options:dpdk-devargs=0000:88:00.0 \\ options:n_rxq=2 \\ ofport_request=1 sudo ovs-vsctl add-port br0 ens4f1 -- set Interface ens4f1 type=dpdk \\ options:dpdk-devargs=0000:88:00.1 \\ options:n_rxq=2 \\ ofport_request=2  In our case we want also to attach VM to OVS-DPDK, so we create also two virtual ports (type=dpdkvhostuser). These ports will be later used by VM.\nsudo ovs-vsctl add-port br0 dpdkvhostuser0 -- set Interface dpdkvhostuser0 type=dpdkvhostuser ofport_request=3 sudo ovs-vsctl add-port br0 dpdkvhostuser1 -- set Interface dpdkvhostuser1 type=dpdkvhostuser ofport_request=4  Then, let\u0026rsquo;s configure the OVS flow fules to push traffic to and from VM\u0026rsquo;s ports.\nsudo ovs-ofctl del-flows br0 sudo ovs-ofctl add-flow br0 in_port=1,actions=output:3 sudo ovs-ofctl add-flow br0 in_port=2,actions=output:4 sudo ovs-ofctl add-flow br0 in_port=3,actions=output:1 sudo ovs-ofctl add-flow br0 in_port=4,actions=output:2  To check current configuration of OVS use:\nsudo ovs-ofctl dump-flows br0 sudo ovs-ofctl dump-ports br0 sudo ovs-vsctl show  Great! We have OVS-DPDK up and running. Now, let\u0026rsquo;s create and run Virtual Machine..\nRunning KVM machine In order to configure and run VMs we will use virsh. Before booting the VM up we need to prepare Host OS by configuring permissions for QEMU and hugepages to be used by VM\u0026rsquo;s ports.\nEdit /etc/libvirt/qemu.conf and modify the following lines to set \u0026ldquo;root\u0026rdquo; as the value of user and group:\nuser = \u0026quot;root\u0026quot; group = \u0026quot;root\u0026quot;  Then, restart libvirt:\nsudo systemctl restart libvirtd.service\nNow, mount hugepages to be used by QEMU:\nsudo mkdir -p /dev/hugepages/libvirt sudo mkdir -p /dev/hugepages/libvirt/qemu sudo mount -t hugetlbfs hugetlbfs /dev/hugepages/libvirt/qemu  Once done, we can run VM by using virsh and XML configuration file. I have prepared the pre-defined VM (testpmd.qcow2) with DPDK installed on. Moreover, I have prepared the user-data.img image with cloud init configuration, which configures password to login into VM. In order to generate user-data.img you can create a text file with the below content:\n#cloud-config password: Password1 chpasswd: { expire: False } ssh_pwauth: True  And generate .img file:\ncloud-localds user-data.img user-data\nNow, let\u0026rsquo;s create the XML file (let\u0026rsquo;s name it demovm.xml) for virsh. Refer to the XML file provided below. It will run the KVM machine with 8GB or RAM and 8 vCPUs. The VM will be attached to the OVS-DPDK ports. Note that you need to set the path to the OS image and user-data.img under the  section.\n\u0026lt;domain type='kvm'\u0026gt; \u0026lt;name\u0026gt;demovm\u0026lt;/name\u0026gt; \u0026lt;uuid\u0026gt;4a9b3f53-fa2a-47f3-a757-dd87720d9d1d\u0026lt;/uuid\u0026gt; \u0026lt;memory unit='KiB'\u0026gt;8388608\u0026lt;/memory\u0026gt; \u0026lt;currentMemory unit='KiB'\u0026gt;8399608\u0026lt;/currentMemory\u0026gt; \u0026lt;memoryBacking\u0026gt; \u0026lt;hugepages\u0026gt; \u0026lt;page size='1' unit='G' nodeset='0'/\u0026gt; \u0026lt;/hugepages\u0026gt; \u0026lt;/memoryBacking\u0026gt; \u0026lt;vcpu placement='static'\u0026gt;8\u0026lt;/vcpu\u0026gt; \u0026lt;cputune\u0026gt; \u0026lt;shares\u0026gt;4096\u0026lt;/shares\u0026gt; \u0026lt;vcpupin vcpu='0' cpuset='14'/\u0026gt; \u0026lt;vcpupin vcpu='1' cpuset='15'/\u0026gt; \u0026lt;emulatorpin cpuset='11,13'/\u0026gt; \u0026lt;/cputune\u0026gt; \u0026lt;os\u0026gt; \u0026lt;type arch='x86_64' machine='pc'\u0026gt;hvm\u0026lt;/type\u0026gt; \u0026lt;boot dev='hd'/\u0026gt; \u0026lt;/os\u0026gt; \u0026lt;features\u0026gt; \u0026lt;acpi/\u0026gt; \u0026lt;apic/\u0026gt; \u0026lt;/features\u0026gt; \u0026lt;cpu mode='host-model'\u0026gt; \u0026lt;model fallback='allow'/\u0026gt; \u0026lt;topology sockets='2' cores='4' threads='1'/\u0026gt; \u0026lt;numa\u0026gt; \u0026lt;cell id='0' cpus='0-1' memory='4194304' unit='KiB' memAccess='shared'/\u0026gt; \u0026lt;/numa\u0026gt; \u0026lt;/cpu\u0026gt; \u0026lt;on_poweroff\u0026gt;destroy\u0026lt;/on_poweroff\u0026gt; \u0026lt;on_reboot\u0026gt;restart\u0026lt;/on_reboot\u0026gt; \u0026lt;on_crash\u0026gt;destroy\u0026lt;/on_crash\u0026gt; \u0026lt;devices\u0026gt; \u0026lt;emulator\u0026gt;/usr/bin/qemu-system-x86_64\u0026lt;/emulator\u0026gt; \u0026lt;disk type='file' device='disk'\u0026gt; \u0026lt;driver name='qemu' type='qcow2' cache='none'/\u0026gt; \u0026lt;source file='/home/tomek/testpmd.qcow2'/\u0026gt; \u0026lt;target dev='vda' bus='virtio'/\u0026gt; \u0026lt;/disk\u0026gt; \u0026lt;disk type='file' device='disk'\u0026gt; \u0026lt;source file='/home/tomek/user-data.img'/\u0026gt; \u0026lt;target dev='vdb' bus='virtio'/\u0026gt; \u0026lt;/disk\u0026gt; \u0026lt;interface type='vhostuser'\u0026gt; \u0026lt;mac address='00:00:00:00:00:01'/\u0026gt; \u0026lt;source type='unix' path='/usr/local/var/run/openvswitch/dpdkvhostuser0' mode='client'/\u0026gt; \u0026lt;model type='virtio'/\u0026gt; \u0026lt;driver queues='2'\u0026gt; \u0026lt;host mrg_rxbuf='off'/\u0026gt; \u0026lt;/driver\u0026gt; \u0026lt;/interface\u0026gt; \u0026lt;interface type='vhostuser'\u0026gt; \u0026lt;mac address='00:00:00:00:00:02'/\u0026gt; \u0026lt;source type='unix' path='/usr/local/var/run/openvswitch/dpdkvhostuser1' mode='client'/\u0026gt; \u0026lt;model type='virtio'/\u0026gt; \u0026lt;driver queues='2'\u0026gt; \u0026lt;host mrg_rxbuf='off'/\u0026gt; \u0026lt;/driver\u0026gt; \u0026lt;/interface\u0026gt; \u0026lt;serial type='pty'\u0026gt; \u0026lt;target port='0'/\u0026gt; \u0026lt;/serial\u0026gt; \u0026lt;console type='pty'\u0026gt; \u0026lt;target type='serial' port='0'/\u0026gt; \u0026lt;/console\u0026gt; \u0026lt;/devices\u0026gt; \u0026lt;/domain\u0026gt;  Once created, let\u0026rsquo;s run the KVM machine using virsh:\nvirsh create demovm.xml\nNow, you can enter the console using:\nvirsh console demovm\nWhen the VM will boot up you can login by using username: ubuntu and password: Password1.\nIf you would like to test network performance of OVS-DPDK + VM deployment I recommend you to run testpmd app inside VM.\nOnce the testpmd app is compiled, let\u0026rsquo;s setup the DPDK ports inside VM and run testpmd:\nsudo sysctl vm.nr_hugepages=1024 sudo mkdir -p /dev/hugepages sudo mount -t hugetlbfs hugetlbfs /dev/hugepages sudo modprobe uio sudo insmod $DPDK_BUILD/kmod/igb_uio.ko $DPDK_DIR/usertools/dpdk-devbind.py --status sudo $DPDK_DIR/usertools/dpdk-devbind.py -b igb_uio 00:02.0 00:03.0  Finally, let\u0026rsquo;s run the testpmd app, which will forward the traffic between two DPDK ports:\nsudo ./testpmd -n 4 --socket-mem 512 -- --burst=64 -i\nSummary This post describes how to setup OVS-DPDK with VM. I hope it will be found useful for anyone, who will need to run OVS-DPDK with KVM. With this setup I was able to achieve about 8.5 Mpps (~7.5 Gbps) for small (74 Bytes) packets on HP ProLiant DL380 Gen9 server with 2x Intel\u0026reg; Xeon\u0026reg; CPU E5-2650 v3 @ 2.30GHz and 128 GB RAM.\nIf you have any question regarding the configuration process or you faced a problem to reproduce the steps don\u0026rsquo;t hesitate to contact me.\n","date":1553299200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553299200,"objectID":"2423dc7f6302e5121fd0b4f64002c04c","permalink":"https://osinstom.github.io/post/2019-10-22-configuring-ovs-dpdk-with-vm/","publishdate":"2019-03-23T00:00:00Z","relpermalink":"/post/2019-10-22-configuring-ovs-dpdk-with-vm/","section":"post","summary":"Recently, I work on a performance comparison between virtualization technologies. In order to made an experiment I had had to setup a test environment based on OVS-DPDK and KVM-based Virtual Machine. This user guide shows how to install and configure the test scenario with OVS-DPDK and libvirt. The test scenario is presented below. According to OVS flow rules configuration we can test PHY-OVS-PHY scenario (green line) or PHY-VM-PHY scenario (red line).","tags":["NFV","OVS-DPDK","Performance","Data plane","DPDK","Linux"],"title":"Configuring OVS-DPDK with VM","type":"post"},{"authors":null,"categories":null,"content":" The MPLS network based on P4 In the previous post I described the implementation of the IP router in the P4 language. Now, I would like to move to a little bit more advanced technology - MPLS (Multi Protocol Label Switching). This post describes the demo of MPLS implemented in P4. The demo is avaiable on my GitHub. Note that the demo is just a Proof of Concept and the scenario may differ from the way how MPLS works in a real-world network.\nIntroduction to MPLS MPLS is widely used in the Wide Area Networks (WANs) to provide reliable connections. An explanation of the MPLS protocol is out of the scope of this post. However, I was basing on this presentation.\nThe demo scenario You can find the user guide and the source code of this demo on my GitHub\nThe test network (presented below) is composed of three routers and two end hosts - each associated to the different network. Hosts are attached to the devices (R1 and R3), which play the role of the edge MPLS router. The R2 router is the core MPLS router - it forwards packets based on the MPLS label. Packets from hosts are encapsulated to MPLS (and decapsulated from MPLS) by the edge routers.\nThe design of the MPLS router in P4 MPLS is a standard to simplify IP forwarding. Devices implementing MPLS are called Label Switching Router (LSR). LSRs use label to set up MPLS tunnel. The basic set of LSR\u0026rsquo;s functionalities consists of:\n FEC (Forwarding Equivalence Class) classifier, which classifies packets into different classes and binds a label to particular class of packets. Label operations:  Push a label - add the MPLS header to a packet Swap a label - change a value of MPLS label Pop a label - remove the MPLS header from a packet  Label-based forwarding - LSR determines the output port for a packet based on the input port and MPLS label.  Besides, LSR must implement also IP lookup to forward non-MPLS packets (or when the MPLS header is stripped out) and MAC-level switching.\nThe P4 program implementing MPLS is composed of 5 Match-Action tables:\n fec_table - it implements a functionality of FEC classifier. We assume classification based on destination IP address (LPM), but the classification could be more granular. If a packet is classified, the push_mpls() method is invoked to add the MPLS header. mpls_table - this table is used by transit or egress LSR. It determines to swap or pop the MPLS label based on the input port and MPLS label. mplslookup_table - it forwards a packet to an output port based on the MPLS label (if exists). iplookup_table - if the MPLS label doesn\u0026rsquo;t exists (it\u0026rsquo;s pure IP packet or MPLS label has been stripped out in the mpls_table) it performs IP lookup to determine the output port. switching_table - it rewrites source and destination MAC addresses (per-hop behaviour).  Such design of the MPLS program aggregates all MPLS functionalities in the single P4 program. It means that the one subset of functionalities will be used by the core MPLS router and the different subset will be used by the edge MPLS router. The set of functionalities used by the MPLS router is configured by installing table entries.\nThe P4 code In this section I will go through the P4 code implementing MPLS.\nLet\u0026rsquo;s start from a definition of the MPLS header:\nheader_type mpls_t { fields { label : 20; tc : 3; // traffic class field bos : 1; // indicates if it's bottom of MPLS label's stack ttl: 8; } }  It is composed of four fields. The most important is the label field, which is dedicated to store the tunnel identifier.\nThe MPLS header is extracted based on etherType by the P4 parser:\n#define ETHERTYPE_MPLS 0x8847 (...) parser parse_ethernet { extract(ethernet); return select(latest.etherType) { ETHERTYPE_IPV4 : parse_ipv4; ETHERTYPE_MPLS : parse_mpls; default: ingress; } }  When extracted, packets are passed to the ingress pipeline. The pipeline defines the order of Match-Action tables that will handle packets.\ncontrol ingress { apply(fec_table); apply(mpls_table); apply(mplslookup_table); if (standard_metadata.egress_spec == 0) { apply(iplookup_table); } apply(switching_table); }  Match-Action tables make use of the pre-defined MPLS actions: _pushmpls(), _popmpls() and _swapmpls():\naction push_mpls(label) { add_header(mpls); modify_field(mpls.label, label); modify_field(mpls.tc, 7); modify_field(mpls.bos, 0x1); modify_field(mpls.ttl, 32); modify_field(ethernet.etherType, ETHERTYPE_MPLS); } action pop_mpls() { remove_header(mpls); modify_field(ethernet.etherType, ETHERTYPE_IPV4); } action swap_mpls(label) { modify_field(mpls.label, label); subtract_from_field(mpls.ttl, 1); }  The _pushmpls() action adds the MPLS header to a packet and sets a value of MPLS fields. Moreover, it modifies etherType to indicate the MPLS protocol. The _popmpls() action removes the MPLS header and reverts a value of etherType to indicate the IPv4 protocol. The _swapmpls() action just changes a value of the MPLS label and decrements a value of TTL.\nThe first table that handles incoming packets is the _fectable. It classifies packets (based on the destination IP address) to the MPLS class (tunnel). If classified, a packet may be encapsulated by using the _pushmpls() action.\ntable fec_table { reads { ipv4.dstAddr : lpm; } actions { push_mpls; _drop; } }  The _mplstable is used to handle MPLS packets. It reads an input port and the MPLS label and decides to pop or swap the MPLS label.\ntable mpls_table { reads { standard_metadata.ingress_port: exact; mpls.label : exact; } actions { pop_mpls; swap_mpls; _drop; } }  When a label is set packets enter _mplslookuptable, which determines an output port based on the MPLS label.\ntable mplslookup_table { reads { mpls.label : exact; } actions { forward; _drop; } }  The last two tables - _iplookuptable and _switchingtable - implement IP routing and MAC rewriting, respectively. The former is used to determine an output port for IP packets (e.g. when packets are decapsulated from MPLS). The latter rewrites MAC addresses hop-by-hop.\nSummary In this post I described how to implement MPLS in the P4 language. The MPLS implementation is fairly straightforward and is much easier than writing the code in C, what\u0026rsquo;s a big advantage of the P4 language! In order to reproduce an experiment follow the steps listed in the user guide.## A New Post\nEnter text in Markdown. Use the toolbar above, or click the ? button for formatting help.\n","date":1551571200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551571200,"objectID":"671fba08efa2c214a9ff79c057509a3e","permalink":"https://osinstom.github.io/post/2019-10-22-mpls-network-p4/","publishdate":"2019-03-03T00:00:00Z","relpermalink":"/post/2019-10-22-mpls-network-p4/","section":"post","summary":"The MPLS network based on P4 In the previous post I described the implementation of the IP router in the P4 language. Now, I would like to move to a little bit more advanced technology - MPLS (Multi Protocol Label Switching). This post describes the demo of MPLS implemented in P4. The demo is avaiable on my GitHub. Note that the demo is just a Proof of Concept and the scenario may differ from the way how MPLS works in a real-world network.","tags":["SDN","BMv2","Python","MPLS","Mininet"],"title":"The MPLS network based on P4","type":"post"},{"authors":null,"categories":null,"content":"In the previous post I introduced P4 and tools to implement network prototypes. Now, I would like to show a basic example how to use this tools in practice to run an experiment.\nI prepared a demo of IP routing to show how simply someone can prototype a commonly used technology. The demo is based on P4 and Mininet. The source code and user guide is available at https://github.com/osinstom/p4-demos/tree/master/ip-routing.\nThe README file contains a description of a P4 program\u0026rsquo;s design as well as a topology of a test network. Below I summarize a design choices that I made:\n I have used P4_16 as it is the newest version of P4. As the P4 target I use BMv2 (https://github.com/p4lang/behavioral-model) The P4_16 introduces the concept of architecture model for target device. I have used V1Model (https://github.com/p4lang/p4c/blob/master/p4include/v1model.p4), which is a defualt one for BMv2 The V1Model forces us to implement the Ingress and Egress control blocks, Parser, Deparser and methods to handle checksum (verifyChecksum and computeChecksum). For the sake of demo I don\u0026rsquo;t focus on checksum operations. Design choices for the router.p4 program:  I defined Ethernet and IPv4 headers (only) I defined additional metadata struct called routing_metadata. It is used to pass a routing decision made in the Ingress block to the Egress block. In the Egress block it will be used to determine the MAC address of the next-hop. The Parser Logic handles only Ethernet and IPv4 headers (e.g. ARP, IPv6 or VLAN is not parsed) For the Ingress control we defined the routing_table. This table has three actions: drop(), NoAction() and ipv4_forward(). The last action performs three operations: it selects output port based on the IPv4 destination LPM it sets a next-hop IP address in routing_metadata. it decrements TTL For the Egress control block we defined switching_table and mac_rewriting_table. The switching_table sets a destination MAC for packet based on next-hop IP from routing_metadata. The mac_rewriting_table changes the source MAC address for packet according to port, that has been selected as the output port.   If you want to know basics of how P4 works I encourage you to follow a user guide and test how IP routing written in P4 works. In the subsequent posts I will show another example - MPLS network written in P4.\n","date":1549843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549843200,"objectID":"6e0b9a50721859451e94d5b730b3832d","permalink":"https://osinstom.github.io/post/2019-10-22-ip-router-in-p4/","publishdate":"2019-02-11T00:00:00Z","relpermalink":"/post/2019-10-22-ip-router-in-p4/","section":"post","summary":"In the previous post I introduced P4 and tools to implement network prototypes. Now, I would like to show a basic example how to use this tools in practice to run an experiment.\nI prepared a demo of IP routing to show how simply someone can prototype a commonly used technology. The demo is based on P4 and Mininet. The source code and user guide is available at https://github.com/osinstom/p4-demos/tree/master/ip-routing.\nThe README file contains a description of a P4 program\u0026rsquo;s design as well as a topology of a test network.","tags":["SDN","P4","BMv2","IPv4","Data Plane"],"title":"IP Router in P4","type":"post"},{"authors":null,"categories":null,"content":"I have contributed to the Open Network Automation Platform (ONAP). I am involved in the Change Management project. The objective is to provide lifecycle management APIs to support seamless software upgrade of Virtual Network Functions. For Casablanca release I implemented a northbound APIs for Application Controller (APP-C) to support distribute traffic mechanism.\n","date":1548892800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548892800,"objectID":"33f28eca7698c8847297b1d280eebf6b","permalink":"https://osinstom.github.io/project/onap/","publishdate":"2019-01-31T00:00:00Z","relpermalink":"/project/onap/","section":"project","summary":"Contribution to Change Management project","tags":["SDN"],"title":"ONAP","type":"project"},{"authors":["Łukasz Rajewski","Tomasz Osinski"],"categories":null,"content":"","date":1546905600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546905600,"objectID":"b086520e40e7c8908b1b790b95355324","permalink":"https://osinstom.github.io/talk/onap-nozay/","publishdate":"2019-01-08T00:00:00Z","relpermalink":"/talk/onap-nozay/","section":"talk","summary":"","tags":[],"title":"ONAP Change Management Dublin Extensions","type":"talk"},{"authors":null,"categories":null,"content":" Introduction Have you ever tried to understand deeply mechanisms of network protocols? I mean network protocols used by computer networks like, for example, Internet Protocol (IP), Transmission Control Protocol (TCP) or Spanning Tree Protocol (STP). Students are taught at unversity how network systems works. Nextly, they become network administrators, developers or architects. They know how to configure network devices, design complex systems or develop network algorithms. However, it is likely that they got their knowledge from books and/or administration courses, not from development practice! On the other hand, I think the best way to understand network paradigms quickly and deeply is to implement network mechanisms on your own. If as a student you get the deep knowledge about networking basics, it will be easier to understand novel technologies in the future. So far, it was required to use some low-level programming languages (C/C++) with thousands lines of code to build network’s prototype. And here comes the P4 technology and Python as a solution to prototype networks in the easy and fast way! Combining P4 with tools provided by Python such as the scapy library or Mininet gives unlimitied possibilities to implement, build and test complex network systems. Moreover, you can prototype network protocols, which don’t even exist yet!\nP4, Python (Scapy) and Mininet – the toolset of network researcher I assume you know already what the Python language is, but what is P4? P4 stands for Programming Protocol-Independent Packet Processors. It has been developed as a next step in the evolution of Software-Defined Networking (SDN). As you may know, the classical telecommunications architecture can be divided into data plane, control plane and management plane. Data plane is the layer, where data packets are being processed and forwarded, while the control plane decides how these packets should be handled. P4 has been designed to enable data plane programming. Thus, using the P4 language you can specify what packet’s headers can be processed and what actions can be performed on packets. The data plane programming was the missing link in the software-based network systems, where control plane and management plane are programmable already. Currently, the structure of network system can be defined completely using software and its behaviour can be changed dynamically by updating the software version. It brings a lot of flexibility to the networking world!\nThe main component of the P4 ecosystem is the P4 language. It is a high-level Domain-Specific Language (DSL) dedicated for programming of network devices. It allows to specify the format of packets (protocol’s headers) to be recognized by network devices and actions to be performed on incoming packets (forwarding, headers modification, adding protocol header, etc). Nevertheless, the P4 language is not consumed directly by the network device, but it must be compiled to the source code for particular platform. These platforms are hardware-based (e.g. Barefoot Tofino, FPGA) or software-based (e.g. BMv2, eBPF/XDP or PISCES). The goal of P4 is to become the same what CUDA language became for graphics cards programming. The concept of the P4 language has been presented below.\nThe P4 program is composed of three main sections: Protocols defintion (data declaration), Parser Logic (Parser \u0026amp; Deparser) and a number of control blocks containing Match-Action tables. The first section defines the protocols headers that the network device will be able to recognize. For instance, defining IPv4 header is as simple as:\nheader ipv4_t { bit\u0026lt;4\u0026gt; version; bit\u0026lt;4\u0026gt; ihl; bit\u0026lt;8\u0026gt; diffserv; bit\u0026lt;16\u0026gt; totalLen; bit\u0026lt;16\u0026gt; identification; bit\u0026lt;3\u0026gt; flags; bit\u0026lt;13\u0026gt; fragOffset; bit\u0026lt;8\u0026gt; ttl; bit\u0026lt;8\u0026gt; protocol; bit\u0026lt;16\u0026gt; hdrChecksum; bit\u0026lt;32\u0026gt; srcAddr; bit\u0026lt;32\u0026gt; dstAddr; }  The programmer just needs to declare header fields and their length. That’s all. Now, these headers are used to parse incoming data and recognize type of packets. The Parser Logic is a state machine defining the steps to process to read and parse incoming packets. Graphically, the Parser Logic for simple IPv4 router looks like:\nWhile the P4 code implementing this logic is:\nparser RouterParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) { state start { transition parse_ethernet; } state parse_ethernet { packet.extract(hdr.ethernet); transition select(hdr.ethernet.etherType) { TYPE_IPV4: parse_ipv4; default: accept; } } state parse_ipv4 { packet.extract(hdr.ipv4); transition accept; } }  Finally, in the P4 program programmer must define a number of control blocks, which contians Match-Action tables. The definition of simple IPv4 forwarding table can be implemented as follows:\ntable routing_table { key = { hdr.ipv4.dstAddr: lpm; } actions = { ipv4_forward; drop; NoAction; } default_action = NoAction(); }  The above routing_table reads the IPv4 destination IP address and matches it based on the Longest Prefix Match algorithm. Then, on packets matching the rule there can be three actions performed: ipv4_forward, drop or NoAction. If you would like to view the complete example of IP router written in P4 visit my GitHub repository.\nSo, as I pointed out, the P4 language can be used to implement any type of data plane protocols. Although, it has some limitations it is a powerful technology that can be used by network researchers to prototype and test novel network protocols. Creativity is the limit! To learn more on P4, let’s visit:\nWhat P4 programming is and why it’s such a big deal for Software-Defined Networking?\nP4 tutorial – presentation\nP4 tutorial from Stanford\nP4 tutorials – GitHub repo\nP4: Programming Protocol-independent Packet Processors\nOk, P4 gives the tool to program the data plane, but what about a control plane? In fact, you can use any language to listen to the packets being sent from data plane. However, I believe the most simple to use is Python. It comes with the library named scapy. Scapy allows you to parse network packets received on sockets as well as construct new packets as simply as in the below example:\n\u0026gt;\u0026gt;\u0026gt; p = IP()/TCP()/\u0026quot;AAAA\u0026quot; \u0026gt;\u0026gt;\u0026gt; p \u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; p.summary() 'IP / TCP 127.0.0.1:ftp-data \u0026gt; 127.0.0.1:www S / Raw'  From my expierence Scapy is a user-friendly library that can be used to implement a control plane applications or generate custom packets from host devices. More on Scapy library you can read here.\nThe P4 language allows us to program data plane and Python is the recommended language to implement control plane of the prototyped network. Voila! Now, the question is how to emulate the real network at scale? The BMv2 switch, which is the reference P4 software switch, is well-integrated with Mininet. Thus, you can create a virtual network of any size on your local computer! I have used Mininet for almost four years to experiment with SDN and OpenFlow – it is a very powerful tool that make life of network researcher easier!\nSummary In this blog post I introduced useful tools for network researchers – P4, Python (Scapy) and Mininet. These technologies make network prototyping easier than ever before! P4 allows to program data plane in tens or hundreds (instead of thousands) of lines of code. Python comes with Scapy library that simplifies programming operations on network packets. Finally, Mininet provides the tool to emulate a real network on your local computer by writing a simple Python script.\nIn the subsequent blog posts I will describe how I have used these tools to learn network protocols/architectures and to prototype solutions. Stay tuned!\nReferences [1] W. L. Costa Cordeıro, J. A. Marques, and L. P. Gaspary, “Data Plane Programmability Beyond OpenFlow: Opportunities and Challenges for Network and Service Operations and Management,” J. Netw. Syst. Manage., vol. 25, no. 4, pp. 784–818, Oct. 2017.\n[2] http://www.p4.org\n","date":1545609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545609600,"objectID":"7a60e83e3698be3258be15f24fc84a80","permalink":"https://osinstom.github.io/post/2019-10-22-network-prototyping-made-easy-with-p4-and-python/","publishdate":"2018-12-24T00:00:00Z","relpermalink":"/post/2019-10-22-network-prototyping-made-easy-with-p4-and-python/","section":"post","summary":"Introduction Have you ever tried to understand deeply mechanisms of network protocols? I mean network protocols used by computer networks like, for example, Internet Protocol (IP), Transmission Control Protocol (TCP) or Spanning Tree Protocol (STP). Students are taught at unversity how network systems works. Nextly, they become network administrators, developers or architects. They know how to configure network devices, design complex systems or develop network algorithms. However, it is likely that they got their knowledge from books and/or administration courses, not from development practice!","tags":["SDN","BMv2","NFV"," Python","Mininet","scapy"],"title":"Network prototyping made easy with P4 and Python!","type":"post"},{"authors":null,"categories":null,"content":" In this post I would like to make a quick review of how the VoWiFi (Voice over WiFi) architecture may change in future 5G deployments. I’m not 3GPP expert and don’t have any insider information from standardization groups, so this text will be based only on official 3GPP specifications and drafts. I hope this blog will be valuable for those engineers, who are currently working on EPC-based VoWiFi deployments and wants to prepare for upcoming evolutions in the area of VoWiFi.\nVoWiFi (or simply WiFi Calling) has gained a momentum as the novel Telco service for end users. They can now make a phone calls via their own home WiFi Access Point. This service is especially important for users being abroad as they can use WiFi Calling instead of making an expensive roaming calls. Along with VoLTE, the IMS-based voice services may replace the old 2G/3G technology.\nAn implementation of VoWiFi has become possible with the emergence of IP Multimedia Subsystem (IMS) and extensions to 3GPP LTE EPC architecture – evolved Packet Gateway (ePDG) and the AAA server. ePDG provides a secure gateway to operator’s network for users connected to untrusted WiFi access points. It leverages IPSec with the EAP-AKA authentication method on SWu interface as the security protocol. The AAA server provides security services for non-3GPP access. The ePDG is integrated with the rest of LTE. It is connected to P-GW over S2b interface using GTP tunneling, while the AAA server is integrated with HSS over SWx and to PGW over S6b interface. P-GW provides access for VoWiFi users to the IMS subsystem.\n Source: Wikipedia  Although the 3GPP 5GSystem (5GS) specification is still in progress (the “Second Wave” of 5G specs has been delayed), a functional architecture of 5G RAN and Core has been already defined and should not be changed significantly (here you can find an introduction to the 5G system architecture). It’s already agreed that the VoWiFi architecture will need some changes to fulfill the requirements of 5G network. One of design pricinples that has been defined for 5G networks (TS 23.501), directly impacts the VoWiFi architecture:\n “Minimize dependencies between the Access Network (AN) and the Core Network (CN). The architecture is defined with a converged core network with a common AN – CN interface which integrates different Access Types e.g. 3GPP access and non-3GPP access“\n As 5G System is expected to be access-agnostic the interface between RAN and Core should be common for access technologies. Moreover, UEs should be allowed to communicate with core network over the NAS (Non-Access Stratum) interface, regardless current point of attachment. The NAS interface is a well-known in 3GPP systems, but in the current EPC-based VoWiFi architecture UE does not perform any signalling over the NAS interface. The principle of converged core network with a common AN-CN interface causes the change in architectural design.\n 5G Core Network with non-3GPP access. Source: TS 23.501  The 5G Core Network functions involved in the VoWiFi service are AMF, SMF, AUSF (control plane) and UPF (user plane). The Mobility Management Functions (MME) from 4G, which implements mobility, access and session management has been decomposed into AMF and SMF. AMF, which stands for Access and Mobility Function realizes access and mobility management functions, while SMF (Session Management Function) manages session connectivity. The decomposition is needed due to the emergence of new services (such as Internet of Things) requiring a differentiated session management. For instance, static IoT likely will not require session management and packets can be forwarded in the Best-Effort manner. Moreover, a control and user plane has been decoupled. Control plane functions has been moved from S-/P-GW to AMF and SMF. User plane functions (such as packet routing, forwarding, and encapsulation) are realized by UPF (User Plane Function).\nIn the 5G System specification the successor of eDPG is called N3IWF (non-3GPP InterWorking Function). The functionality of N3IWF at high-level is almost the same as ePDG – it provides a secure gateway to operator’s network for non-3GPP access technology. The interface between UE and N3IWF remains similar and is based on IPSec/IKE to establish a secure tunnel. As UE is expected to communicate with AMF over the NAS interface, there is a new N2 interface connecting N3IWF with AMF. Note that the N2 interface is considered to realized by a NG Application Protocol (NGAP) defined in TS 38.413. N3IWF is responsible for setting up the IPSec connection to be used by control plane traffic directed to AMF. As a consequence UE and N3IWF need to establish two IPSec Security Associations (SAs):\n Signalling (control plane) IPSec SA – it transports NAS messages destined to AMF, User plane IPSec SA – it transports packets destined to IMS  Signalling (control plane) IPSec SA In the first step, UE and N3IWF must establish a signalling IPSec SA, which is used to securely exchange NAS messages between UE and AMF. The NAS interface is further leveraged to register UE in the 5G system. The below figure presents a control plane protocol’s stack used to establish signalling IPSec SA. Similarly to ePDG, IKEv2 protocol is used to setup security associations. However, the new authentication method – EAP-5G (or 5G AKA) – is introduced. The EAP method is used to encapsulate NAS messages between UE and N3IWF. Note that specification says that EAP-5G is “vendor-specific“.\n Signalling protocol’s stack before signalling IPSec SA is established  When the signalling IPSec SA is established, the IPSec tunnel is configured to encapsulate NAS messages between UE and N3IWF. At this stage, UE can communicate with AMF to perform NAS signalling. It is presented in the figure below.\n Signalling protocol’s stack when signalling IPSec SA is established  User plane IPSec SA When UE is registered in the 5G system (via NAS interface) it can establish a new child IPSec SA (called user plane IPSec SA) to communicate with the IMS system. The procedure for establishing user plane IPSec SA is also supported by AMF.\n User plane protocol’s stack to establish user plane IPSec SA  If IKEv2 procedure is finished, UE can communicate with P-CSCF (IMS gateway). A user plane protocol’s stack is depicted in the figure below. There are two main differences in comparison to the ePDG-based architecture:\n The GRE (Generic Routing Encapsulation) protocol has been introduced to carry user data packets between UE and N3IWF. GRE allows to implement a flow-based QoS model as specified in TS 23.501. The GRE header carries QFI (QoS Flow Identifier) associated with user data packets. Optionally, N3IWF can indicate Reflective QoS Identifier (RQI). More on QoS in 5G networks here.\n The new N3 interface between N3IWF and UPF. This interface is considered to be implemented based on GTPv2.\n   User plane protocol’s stack to transport user data packets  Summary In this post I have made a quick review of the current status of work on non-3GPP access part of the 5G network. I have presented a general architecture and protocols used to implement VoWiFi in the 5G system.\nAlthough the 5G specification is not completed yet, some design choices have been already made. The major changes to the VoWiFi architecture are applied on the 3GPP network side. The Non-3GPP InterWorking Function (N3IWF) has been introduced as a successor of ePDG. Generally, enhancements to the VoWiFi architecture can be summarized as follows:\n Common NAS – the VoWiFi architecture has been extended with a support for NAS signalling between UE and AMF (the successor of MME). It means that UE and N3IWF establishes two IPSec SAs. Signalling IPSec SA transports NAS messages, while user plane IPSec SA carries packets (e.g. SIP signalling) destined to IMS. Modified authentication method – the procedure establishing the IPSec tunnel is based on new authentication method – 5G AKA. Protocol enhancements – the EAP-5G protocol is used to encapsulate NAS messages between UE and N3IWF. Additionally, the GRE protocol is used to encapsulate user-plane traffic.  References [1] 3GPP TS 23.501\n[2] 3GPP TS 24.502\n[3] 5G Enhancements to Non – 3GPP Access Security\n","date":1545091200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545091200,"objectID":"f30d522c4305667942436c480c673e77","permalink":"https://osinstom.github.io/post/initial-view-on-vowifi-in-the-5g-network/","publishdate":"2018-12-18T00:00:00Z","relpermalink":"/post/initial-view-on-vowifi-in-the-5g-network/","section":"post","summary":"In this post I would like to make a quick review of how the VoWiFi (Voice over WiFi) architecture may change in future 5G deployments. I’m not 3GPP expert and don’t have any insider information from standardization groups, so this text will be based only on official 3GPP specifications and drafts. I hope this blog will be valuable for those engineers, who are currently working on EPC-based VoWiFi deployments and wants to prepare for upcoming evolutions in the area of VoWiFi.","tags":["3GPP","ePDG","N3IWF","IPSec","IKE","SIP"],"title":"Initial view on VoWiFi in the 5G network","type":"post"},{"authors":["Tomasz Osinski","Abdulhalim Dandoush"],"categories":null,"content":"","date":1541376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541376000,"objectID":"17602a0e73cfdacd4498beaa5b6bb4bc","permalink":"https://osinstom.github.io/publication/cnsm2018/","publishdate":"2018-11-05T00:00:00Z","relpermalink":"/publication/cnsm2018/","section":"publication","summary":"","tags":null,"title":"XMPP as a scalable multi-tenants isolation solution for ONOS-based Software-Defined Cloud Networks","type":"publication"},{"authors":["Slawomir Kuklinski","Lechoslaw Tomaszewski","Tomasz Osinski","Adlen Ksentini","Pantelis A. Frangoudis","Eleonora Cau","Marius Corici"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   ","date":1529884800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1529884800,"objectID":"987f34d1eea2276a37c0d91184de1cb5","permalink":"https://osinstom.github.io/publication/netsoft2018/","publishdate":"2018-06-25T00:00:00Z","relpermalink":"/publication/netsoft2018/","section":"publication","summary":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   ","tags":null,"title":"A reference architecture for network slicing","type":"publication"},{"authors":["Tomasz Osinski","Abdulhalim Dandoush"],"categories":null,"content":"","date":1523404800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1523404800,"objectID":"3f95a297bbb540b595749d665de458bd","permalink":"https://osinstom.github.io/talk/onos-xmpp/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/onos-xmpp/","section":"talk","summary":"","tags":[],"title":"Evaluation of XMPP as a Southbound Interface for ONOS","type":"talk"},{"authors":null,"categories":null,"content":"I have contributed to the 5G!Pagoda EU-Japan project realized under H2020 programme. 5G!Pagoda is a research project related to network slicing technology for 5G networks. I was involved in designing a network slicing architecture and multi-domain orchestration. Moreover, I had been developing prototypes (PoCs) of designed solutions based on OpenStack, Docker, Kubernetes, OpenBaton, Ansible and Juju.\n","date":1514592000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514592000,"objectID":"628e0503069259113b48377f04cfbaeb","permalink":"https://osinstom.github.io/project/pagoda/","publishdate":"2017-12-30T00:00:00Z","relpermalink":"/project/pagoda/","section":"project","summary":"Contribution to the EU-Japan H2020 project","tags":["SDN"],"title":"5G!Pagoda","type":"project"},{"authors":[],"categories":[],"content":"In my first post on this blog I encourage you to watch my YouTube tutorial about IPSec, which was made by me some time ago. The tutorial is a practical guide based on Strongswan, which is an open-source implementation of IPSec stack.\n Note! This post is taken from my old blog site, which I moved to the GitHub pages.\n","date":1511222400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511222400,"objectID":"7d3b5324dd55595b869ae7ff2df05c88","permalink":"https://osinstom.github.io/post/ipsec-explanation/","publishdate":"2017-11-21T00:00:00Z","relpermalink":"/post/ipsec-explanation/","section":"post","summary":"In my first post on this blog I encourage you to watch my YouTube tutorial about IPSec, which was made by me some time ago. The tutorial is a practical guide based on Strongswan, which is an open-source implementation of IPSec stack.\n Note! This post is taken from my old blog site, which I moved to the GitHub pages.","tags":null,"title":"Explanation of IPSec basics","type":"post"},{"authors":null,"categories":null,"content":"I have implemented a multiputh routing based on Depth-First Search algorithm for Floodlight - an open-source SDN Controller.\n","date":1423872000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1423872000,"objectID":"6693eb583c9f02741a65e29045c72ba8","permalink":"https://osinstom.github.io/project/floodlight/","publishdate":"2015-02-14T00:00:00Z","relpermalink":"/project/floodlight/","section":"project","summary":"Implementation of multipath routing based on Depth-First Search algorithm.","tags":["SDN"],"title":"Floodlight","type":"project"}]