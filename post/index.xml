<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tomasz Osiński - blog &amp; personal site</title>
    <link>https://osinstom.github.io/post/</link>
    <description>Recent content in Posts on Tomasz Osiński - blog &amp; personal site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>{year}</copyright>
    <lastBuildDate>Wed, 07 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://osinstom.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing tunneling techniques in P4 based on the example of VXLAN</title>
      <link>https://osinstom.github.io/post/2019-10-26-implementing-tunneling-techniques-in-p4-based-on-the-example-of-vxlan/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://osinstom.github.io/post/2019-10-26-implementing-tunneling-techniques-in-p4-based-on-the-example-of-vxlan/</guid>
      <description>Introduction Recently, I started to implement the support for packet tunneling in our P4C-to-uBPF compiler. However, in order to deeply understand P4 constructs describing tunneling I have created the reference implementation of the VXLAN tunneling for BMv2 switch.
This blog post describes how to design and implement more complex tunneling technique (like VXLAN) in the P4 language. The source code is available on Github.
Short introduction to VXLAN The VXLAN (Virtual eXtensible Local Area Network) protocol has been standardized in RFC 7348 and is usually used to provide overlay communications between virtual machines in the multi-tenant virtualized data center.</description>
    </item>
    
    <item>
      <title>Configuring OVS-DPDK with VM</title>
      <link>https://osinstom.github.io/post/2019-10-22-configuring-ovs-dpdk-with-vm/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://osinstom.github.io/post/2019-10-22-configuring-ovs-dpdk-with-vm/</guid>
      <description>Recently, I work on a performance comparison between virtualization technologies. In order to made an experiment I had had to setup a test environment based on OVS-DPDK and KVM-based Virtual Machine. This user guide shows how to install and configure the test scenario with OVS-DPDK and libvirt. The test scenario is presented below. According to OVS flow rules configuration we can test PHY-OVS-PHY scenario (green line) or PHY-VM-PHY scenario (red line).</description>
    </item>
    
    <item>
      <title>The MPLS network based on P4</title>
      <link>https://osinstom.github.io/post/2019-10-22-mpls-network-p4/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://osinstom.github.io/post/2019-10-22-mpls-network-p4/</guid>
      <description>The MPLS network based on P4 In the previous post I described the implementation of the IP router in the P4 language. Now, I would like to move to a little bit more advanced technology - MPLS (Multi Protocol Label Switching). This post describes the demo of MPLS implemented in P4. The demo is avaiable on my GitHub. Note that the demo is just a Proof of Concept and the scenario may differ from the way how MPLS works in a real-world network.</description>
    </item>
    
    <item>
      <title>IP Router in P4</title>
      <link>https://osinstom.github.io/post/2019-10-22-ip-router-in-p4/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://osinstom.github.io/post/2019-10-22-ip-router-in-p4/</guid>
      <description>In the previous post I introduced P4 and tools to implement network prototypes. Now, I would like to show a basic example how to use this tools in practice to run an experiment.
I prepared a demo of IP routing to show how simply someone can prototype a commonly used technology. The demo is based on P4 and Mininet. The source code and user guide is available at https://github.com/osinstom/p4-demos/tree/master/ip-routing.
The README file contains a description of a P4 program&amp;rsquo;s design as well as a topology of a test network.</description>
    </item>
    
    <item>
      <title>Network prototyping made easy with P4 and Python!</title>
      <link>https://osinstom.github.io/post/2019-10-22-network-prototyping-made-easy-with-p4-and-python/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://osinstom.github.io/post/2019-10-22-network-prototyping-made-easy-with-p4-and-python/</guid>
      <description>Introduction Have you ever tried to understand deeply mechanisms of network protocols? I mean network protocols used by computer networks like, for example, Internet Protocol (IP), Transmission Control Protocol (TCP) or Spanning Tree Protocol (STP). Students are taught at unversity how network systems works. Nextly, they become network administrators, developers or architects. They know how to configure network devices, design complex systems or develop network algorithms. However, it is likely that they got their knowledge from books and/or administration courses, not from development practice!</description>
    </item>
    
    <item>
      <title>Initial view on VoWiFi in the 5G network</title>
      <link>https://osinstom.github.io/post/initial-view-on-vowifi-in-the-5g-network/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://osinstom.github.io/post/initial-view-on-vowifi-in-the-5g-network/</guid>
      <description>In this post I would like to make a quick review of how the VoWiFi (Voice over WiFi) architecture may change in future 5G deployments. I’m not 3GPP expert and don’t have any insider information from standardization groups, so this text will be based only on official 3GPP specifications and drafts. I hope this blog will be valuable for those engineers, who are currently working on EPC-based VoWiFi deployments and wants to prepare for upcoming evolutions in the area of VoWiFi.</description>
    </item>
    
    <item>
      <title>Explanation of IPSec basics</title>
      <link>https://osinstom.github.io/post/ipsec-explanation/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://osinstom.github.io/post/ipsec-explanation/</guid>
      <description>In my first post on this blog I encourage you to watch my YouTube tutorial about IPSec, which was made by me some time ago. The tutorial is a practical guide based on Strongswan, which is an open-source implementation of IPSec stack.
 Note! This post is taken from my old blog site, which I moved to the GitHub pages.</description>
    </item>
    
  </channel>
</rss>