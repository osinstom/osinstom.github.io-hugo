<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Tomasz Osi≈Ñski - blog &amp; personal site</title>
    <link>https://osinstom.github.io/post/</link>
      <atom:link href="https://osinstom.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2019</copyright><lastBuildDate>Sun, 20 Oct 2019 21:07:00 +0200</lastBuildDate>
    <image>
      <url>https://osinstom.github.io/img/icon-192.png</url>
      <title>Posts</title>
      <link>https://osinstom.github.io/post/</link>
    </image>
    
    <item>
      <title>Explanation of IPSec basics</title>
      <link>https://osinstom.github.io/post/ipsec-explanation/</link>
      <pubDate>Sun, 20 Oct 2019 21:07:00 +0200</pubDate>
      <guid>https://osinstom.github.io/post/ipsec-explanation/</guid>
      <description>&lt;p&gt;In my first post on this blog I encourage you to watch my YouTube tutorial about IPSec, which was made by me some time ago. The tutorial is a practical guide based on Strongswan, which is an open-source implementation of IPSec stack.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/D-Esrw8wxA4&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Note!&lt;/strong&gt; This post is taken from my old blog site, which I moved to the GitHub pages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring OVS-DPDK with VM</title>
      <link>https://osinstom.github.io/post/2019-10-22-configuring-ovs-dpdk-with-vm/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://osinstom.github.io/post/2019-10-22-configuring-ovs-dpdk-with-vm/</guid>
      <description>

&lt;p&gt;Recently, I work on a performance comparison between virtualization technologies. In order to made an experiment I had had to setup a test environment based on &lt;a href=&#34;https://software.intel.com/en-us/articles/open-vswitch-with-dpdk-overview&#34; target=&#34;_blank&#34;&gt;OVS-DPDK&lt;/a&gt; and &lt;a href=&#34;https://www.redhat.com/en/topics/virtualization/what-is-KVM&#34; target=&#34;_blank&#34;&gt;KVM-based Virtual Machine&lt;/a&gt;. This user guide shows how to install and configure the test scenario with OVS-DPDK and libvirt. The test scenario is presented below. According to OVS flow rules configuration we can test PHY-OVS-PHY scenario (green line) or PHY-VM-PHY scenario (red line).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{site.baseurl}}/static/img/test-scenario-ovs-dpdk.png&#34; alt=&#34;The OVS-DPDK + VM scenario&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;Before starting installation of OVS-DPDK and VMs, let&amp;rsquo;s prepare OS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade

sudo apt-get -y install git qemu-system-x86 python-pip fuse libfuse-dev dh-autoreconf openssl libssl-dev cmake libpcap-dev python-yaml libnuma-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-ovs-dpdk&#34;&gt;Installing OVS-DPDK&lt;/h3&gt;

&lt;p&gt;Firstly, we need to install DPDK and Open vSwitch from a source code. To install DPDK run below commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $HOME &amp;amp; mkdir dpdk
cd dpdk/
wget http://fast.dpdk.org/rel/dpdk-18.11.tar.xz
tar xf dpdk-18.11.tar.xz
cd dpdk-18.11/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we need to export environment variables, which point out to DPDK..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DPDK_DIR=$HOME/dpdk/dpdk-18.11
export DPDK_TARGET=x86_64-native-linuxapp-gcc
export DPDK_BUILD=$DPDK_DIR/$DPDK_TARGET
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. and install DPDK. Note that we are using special flags (&lt;em&gt;-g -Ofast -march=native -Q&lt;/em&gt;) to achieve a better performance of OVS-DPDK.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EXTRA_CFLAGS=&amp;quot;-g -Ofast&amp;quot; make install -j T=$target CONFIG_RTE_BUILD_COMBINE_LIBS=y CONFIG_RTE_LIBRTE_VHOST=y DESTDIR=install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If the installation of DPDK has been successful, you can install OVS-DPDK.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $HOME/dpdk/
git clone https://github.com/openvswitch/ovs
cd ovs
./boot.sh
./configure CFLAGS=&amp;quot;-g -Ofast&amp;quot; --with-dpdk=$DPDK_BUILD
make -j CFLAGS=&amp;quot;-g -Ofast -march=native -Q&amp;quot;
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you should be able to verify OVS-DPDK installation by using below commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tomek@s14-2:~$ sudo ovs-vsctl show
3bb620bf-4d6f-4ddc-94ff-03f1ff9ccc93
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;tomek@s14-2:~$ sudo ovs-vswitchd --version
ovs-vswitchd (Open vSwitch) 2.11.90
DPDK 18.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configuring-ovs-dpdk&#34;&gt;Configuring OVS-DPDK&lt;/h3&gt;

&lt;p&gt;Firstly, let&amp;rsquo;s configure DPDK ports. Following commands inject required kernel driver (i.e. uio, igb_uio, vfio). It is up to you, which one you would like to use. In order to choose one refer to &lt;a href=&#34;https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html&#34; target=&#34;_blank&#34;&gt;https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html&lt;/a&gt;. For our purposes we have used &lt;em&gt;uiopcigeneric&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd dpdk/dpdk-18.11/usertools/
sudo modprobe uio_pci_generic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once kernel module has been injected NICs can be attached to DPDK. Note that you need to use the &lt;em&gt;bus-info&lt;/em&gt; format (e.g.0000:88:00.0). To retrieve NIC ID in the bus-info format use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lspci | grep Ethernet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will list all interfaces along with the bus-info identifier. Then, use dpdk-devbind.py script to bind chosen interfaces with DPDK drivers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./dpdk-devbind.py -b uio_pci_generic 0000:88:00.0
sudo ./dpdk-devbind.py -b uio_pci_generic 0000:88:00.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check if interfaces have been bound successfully using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tomek@s14-2:~/dpdk/dpdk-18.11$ usertools/dpdk-devbind.py --status

Network devices using DPDK-compatible driver
============================================
0000:88:00.0 &#39;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#39; drv=uio_pci_generic unused=ixgbe
0000:88:00.1 &#39;82599ES 10-Gigabit SFI/SFP+ Network Connection 10fb&#39; drv=uio_pci_generic unused=ixgbe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under &amp;ldquo;Network devices using DPDK-compatible driver&amp;rdquo; you should see the list of ports, which are already bound to the DPDK-compatible driver.&lt;/p&gt;

&lt;p&gt;Once Ethernet interfaces have been bound to DPDK, it&amp;rsquo;s time to mount hugepages. Hugepages are contiguous regions - segments of physical memory. In order to allocate hugepages persistently I have added following parameters to GRUB_CMDLINE_LINUX_DEFAULT in &lt;em&gt;/etc/default/grub&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;default_hugepagesz=1G hugepagesz=1G hugepages=16 hugepagesz=2M hugepages=2048&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, upgrade grub and reboot a machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo update-grub
sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This configuration will take effect after every system reboot and will result in allocating 16 hugepages of the 1G size.&lt;/p&gt;

&lt;p&gt;After reboot, you need only to mount hugepages using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /mnt/huge
sudo mount -t hugetlbfs nodev /mnt/huge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To validate if hugepages has been allocated properly by:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -i huge /proc/meminfo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The number of free hugepages should be less than total number of available hugepages.&lt;/p&gt;

&lt;p&gt;Great, the DPDK environment should be configured properly now. We can move to the configuration of OVS. Firstly initialize OVS brigde with DPDK capabilities:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl --no-wait init
sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The dpdk-init=true should be applied. To validate use below command, which should return the &lt;em&gt;true&lt;/em&gt; value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ovs-vsctl get Open_vSwitch . dpdk_initialized&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to define other OVS parameters to be used by the DPDK ports. These are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;other_config:dpdk-hugepage-dir&lt;/strong&gt; - points to a directory, where hugepages are mounted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other_config:dpdk-socket-mem&lt;/strong&gt; - a comma seperated list of hugepage memory, specified in MBs per NUMA node, allocated to the ovs-vswitchd to use for the DPDK dataplane&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other_config:dpdk-lcore-mask&lt;/strong&gt; - a bitmask of what CPU core to pin to non-dataplane threads of the ovs-vswitchd to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other_config:pmd-cpu-mask&lt;/strong&gt; - a bitmask of what CPU core to pin to the dataplane-related (Poll Mode Driver, PMD) threads of the ovs-vswitchd to. Each bit set in the bitmask result in the creating of the PMD thread.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other_config:pmd-rxq-affinity&lt;/strong&gt; - it is set per Interface. It pins a queue of port to the given CPU core. This parameter is optional, but in some circumstances it can be used to pin a queue of port to the specific CPU core.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two options are quite straightforward and can be configured with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem=&amp;quot;4096M&amp;quot;
sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-hugepage-dir=&amp;quot;/mnt/huge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, to configure &lt;em&gt;dpdk-lcore-mask&lt;/em&gt; and &lt;em&gt;pmd-cpu-mask&lt;/em&gt; we need to find out how our server is configured. In particular, we need to know how many NUMA nodes our server has and how CPU cores are allocated across NUMA nodes.&lt;/p&gt;

&lt;p&gt;Just to clarify, NUMA stands for Non-Uniform Memory Access. In NUMA system memory is divided into zones called nodes, which are allocated to particular CPUs or sockets. Access to memory that is local to a CPU is faster than memory connected to remote CPUs on that system. Normally, each socket on a NUMA system has a local memory node whose contents can be accessed faster than the memory in the node local to another CPU or the memory on a bus shared by all CPUs.&lt;/p&gt;

&lt;p&gt;Thus, in order to achieve better performance CPU cores used by OVS-DPDK should be located on the same NUMA node as DPDK ports. So, we configure OVS-DPDK with NUMA-awareness. In order to check NUMA topology on the server use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lscpu
--- 

NUMA node0 CPU(s):     0-9,20-29
NUMA node1 CPU(s):     10-19,30-39
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our case we have two NUMA nodes (0 and 1). The CPU cores 0-9 and 20-29 are associated with NUMA node0, while the others are associated with NUMA node1.&lt;/p&gt;

&lt;p&gt;Now, for the physical ports (88:00.0 and 88:00.1 in our case), which will be connected to OVS-DPDK we should check the associated NUMA node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat /sys/bus/pci/devices/0000:88:00.0/numa_node
1
cat /sys/bus/pci/devices/0000:88:00.1/numa_node
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;As our NICs are associated with the NUMA node 1 we should dedicate CPU cores in the same NUMA node to run PMD threads.&lt;/strong&gt; From the &lt;em&gt;lscpu&lt;/em&gt; command&amp;rsquo;s output we know we should use CPU cores from range 10-19 or 30-39. So, let&amp;rsquo;s configure remaining parameters (we don&amp;rsquo;t configure &lt;em&gt;pmd-rxq-affinity&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-lcore-mask=&amp;quot;&amp;quot;
sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:pmd-cpu-mask=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once DPDK parameters for OVS are configured, let&amp;rsquo;s run OVS-DPDK bridge. To create OVS-DPDK bridge use type=netdev:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl add-br br0
sudo ovs-vsctl set Bridge br0 datapath_type=netdev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add physical ports to OVS-DPDK:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl add-port br0 ens4f0 -- set Interface ens4f0 type=dpdk \
            options:dpdk-devargs=0000:88:00.0 \
            options:n_rxq=2 \
            ofport_request=1

sudo ovs-vsctl add-port br0 ens4f1 -- set Interface ens4f1 type=dpdk \
            options:dpdk-devargs=0000:88:00.1 \
            options:n_rxq=2 \
            ofport_request=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our case we want also to attach VM to OVS-DPDK, so we create also two virtual ports (type=dpdkvhostuser). These ports will be later used by VM.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl add-port br0 dpdkvhostuser0 -- set Interface dpdkvhostuser0 type=dpdkvhostuser ofport_request=3

sudo ovs-vsctl add-port br0 dpdkvhostuser1 -- set Interface dpdkvhostuser1 type=dpdkvhostuser ofport_request=4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, let&amp;rsquo;s configure the OVS flow fules to push traffic to and from VM&amp;rsquo;s ports.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-ofctl del-flows br0
sudo ovs-ofctl add-flow br0 in_port=1,actions=output:3
sudo ovs-ofctl add-flow br0 in_port=2,actions=output:4
sudo ovs-ofctl add-flow br0 in_port=3,actions=output:1
sudo ovs-ofctl add-flow br0 in_port=4,actions=output:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check current configuration of OVS use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ovs-ofctl dump-flows br0
sudo ovs-ofctl dump-ports br0
sudo ovs-vsctl show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! We have OVS-DPDK up and running. Now, let&amp;rsquo;s create and run Virtual Machine..&lt;/p&gt;

&lt;h3 id=&#34;running-kvm-machine&#34;&gt;Running KVM machine&lt;/h3&gt;

&lt;p&gt;In order to configure and run VMs we will use &lt;em&gt;virsh&lt;/em&gt;. Before booting the VM up we need to prepare Host OS by configuring permissions for QEMU and hugepages to be used by VM&amp;rsquo;s ports.&lt;/p&gt;

&lt;p&gt;Edit &lt;strong&gt;&lt;em&gt;/etc/libvirt/qemu.conf&lt;/em&gt;&lt;/strong&gt; and modify the following lines to set &amp;ldquo;root&amp;rdquo; as the value of user and group:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = &amp;quot;root&amp;quot;
group = &amp;quot;root&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, restart libvirt:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo systemctl restart libvirtd.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, mount hugepages to be used by QEMU:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /dev/hugepages/libvirt
sudo mkdir -p /dev/hugepages/libvirt/qemu
sudo mount -t hugetlbfs hugetlbfs /dev/hugepages/libvirt/qemu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once done, we can run VM by using &lt;em&gt;virsh&lt;/em&gt; and XML configuration file. I have prepared the pre-defined VM (testpmd.qcow2) with DPDK installed on. Moreover, I have prepared the user-data.img image with cloud init configuration, which configures password to login into VM. In order to generate user-data.img you can create a text file with the below content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config
password: Password1
chpasswd: { expire: False }
ssh_pwauth: True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And generate .img file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cloud-localds user-data.img user-data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s create the XML file (let&amp;rsquo;s name it &lt;em&gt;demovm.xml&lt;/em&gt;) for virsh. Refer to the XML file provided below. It will run the KVM machine with 8GB or RAM and 8 vCPUs. The VM will be attached to the OVS-DPDK ports. Note that you need to set the path to the OS image and user-data.img under the &lt;disk&gt; section.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;domain type=&#39;kvm&#39;&amp;gt;
  &amp;lt;name&amp;gt;demovm&amp;lt;/name&amp;gt;
  &amp;lt;uuid&amp;gt;4a9b3f53-fa2a-47f3-a757-dd87720d9d1d&amp;lt;/uuid&amp;gt;
  &amp;lt;memory unit=&#39;KiB&#39;&amp;gt;8388608&amp;lt;/memory&amp;gt;
  &amp;lt;currentMemory unit=&#39;KiB&#39;&amp;gt;8399608&amp;lt;/currentMemory&amp;gt;
  &amp;lt;memoryBacking&amp;gt;
    &amp;lt;hugepages&amp;gt;
      &amp;lt;page size=&#39;1&#39; unit=&#39;G&#39; nodeset=&#39;0&#39;/&amp;gt;
    &amp;lt;/hugepages&amp;gt;
  &amp;lt;/memoryBacking&amp;gt;
  &amp;lt;vcpu placement=&#39;static&#39;&amp;gt;8&amp;lt;/vcpu&amp;gt;
  &amp;lt;cputune&amp;gt;
    &amp;lt;shares&amp;gt;4096&amp;lt;/shares&amp;gt;
    &amp;lt;vcpupin vcpu=&#39;0&#39; cpuset=&#39;14&#39;/&amp;gt;
    &amp;lt;vcpupin vcpu=&#39;1&#39; cpuset=&#39;15&#39;/&amp;gt;
    &amp;lt;emulatorpin cpuset=&#39;11,13&#39;/&amp;gt;
  &amp;lt;/cputune&amp;gt;
  &amp;lt;os&amp;gt;
    &amp;lt;type arch=&#39;x86_64&#39; machine=&#39;pc&#39;&amp;gt;hvm&amp;lt;/type&amp;gt;
    &amp;lt;boot dev=&#39;hd&#39;/&amp;gt;
  &amp;lt;/os&amp;gt;
  &amp;lt;features&amp;gt;
    &amp;lt;acpi/&amp;gt;
    &amp;lt;apic/&amp;gt;
  &amp;lt;/features&amp;gt;
  &amp;lt;cpu mode=&#39;host-model&#39;&amp;gt;
    &amp;lt;model fallback=&#39;allow&#39;/&amp;gt;
    &amp;lt;topology sockets=&#39;2&#39; cores=&#39;4&#39; threads=&#39;1&#39;/&amp;gt;
    &amp;lt;numa&amp;gt;
      &amp;lt;cell id=&#39;0&#39; cpus=&#39;0-1&#39; memory=&#39;4194304&#39; unit=&#39;KiB&#39; memAccess=&#39;shared&#39;/&amp;gt;
    &amp;lt;/numa&amp;gt;
  &amp;lt;/cpu&amp;gt;
  &amp;lt;on_poweroff&amp;gt;destroy&amp;lt;/on_poweroff&amp;gt;
  &amp;lt;on_reboot&amp;gt;restart&amp;lt;/on_reboot&amp;gt;
  &amp;lt;on_crash&amp;gt;destroy&amp;lt;/on_crash&amp;gt;
  &amp;lt;devices&amp;gt;
    &amp;lt;emulator&amp;gt;/usr/bin/qemu-system-x86_64&amp;lt;/emulator&amp;gt;
    &amp;lt;disk type=&#39;file&#39; device=&#39;disk&#39;&amp;gt;
      &amp;lt;driver name=&#39;qemu&#39; type=&#39;qcow2&#39; cache=&#39;none&#39;/&amp;gt;
      &amp;lt;source file=&#39;/home/tomek/testpmd.qcow2&#39;/&amp;gt;
      &amp;lt;target dev=&#39;vda&#39; bus=&#39;virtio&#39;/&amp;gt;
    &amp;lt;/disk&amp;gt;
    &amp;lt;disk type=&#39;file&#39; device=&#39;disk&#39;&amp;gt;
      &amp;lt;source file=&#39;/home/tomek/user-data.img&#39;/&amp;gt;
      &amp;lt;target dev=&#39;vdb&#39; bus=&#39;virtio&#39;/&amp;gt;
    &amp;lt;/disk&amp;gt;
    &amp;lt;interface type=&#39;vhostuser&#39;&amp;gt;
      &amp;lt;mac address=&#39;00:00:00:00:00:01&#39;/&amp;gt;
      &amp;lt;source type=&#39;unix&#39; path=&#39;/usr/local/var/run/openvswitch/dpdkvhostuser0&#39; mode=&#39;client&#39;/&amp;gt;
       &amp;lt;model type=&#39;virtio&#39;/&amp;gt;
      &amp;lt;driver queues=&#39;2&#39;&amp;gt;
        &amp;lt;host mrg_rxbuf=&#39;off&#39;/&amp;gt;
      &amp;lt;/driver&amp;gt;
    &amp;lt;/interface&amp;gt;
    &amp;lt;interface type=&#39;vhostuser&#39;&amp;gt;
      &amp;lt;mac address=&#39;00:00:00:00:00:02&#39;/&amp;gt;
      &amp;lt;source type=&#39;unix&#39; path=&#39;/usr/local/var/run/openvswitch/dpdkvhostuser1&#39; mode=&#39;client&#39;/&amp;gt;
      &amp;lt;model type=&#39;virtio&#39;/&amp;gt;
      &amp;lt;driver queues=&#39;2&#39;&amp;gt;
        &amp;lt;host mrg_rxbuf=&#39;off&#39;/&amp;gt;
      &amp;lt;/driver&amp;gt;
    &amp;lt;/interface&amp;gt;
    &amp;lt;serial type=&#39;pty&#39;&amp;gt;
      &amp;lt;target port=&#39;0&#39;/&amp;gt;
    &amp;lt;/serial&amp;gt;
    &amp;lt;console type=&#39;pty&#39;&amp;gt;
      &amp;lt;target type=&#39;serial&#39; port=&#39;0&#39;/&amp;gt;
    &amp;lt;/console&amp;gt;
  &amp;lt;/devices&amp;gt;
&amp;lt;/domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once created, let&amp;rsquo;s run the KVM machine using virsh:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;virsh create demovm.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, you can enter the console using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;virsh console demovm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the VM will boot up you can login by using username: &lt;em&gt;ubuntu&lt;/em&gt; and password: &lt;em&gt;Password1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to test network performance of OVS-DPDK + VM deployment I recommend you to run testpmd app inside VM.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://doc.dpdk.org/guides/testpmd_app_ug/build_app.html&#34; target=&#34;_blank&#34;&gt;Once the testpmd app is compiled&lt;/a&gt;, let&amp;rsquo;s setup the DPDK ports inside VM and run testpmd:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sysctl vm.nr_hugepages=1024
sudo mkdir -p /dev/hugepages
sudo mount -t hugetlbfs hugetlbfs /dev/hugepages
sudo modprobe uio
sudo insmod $DPDK_BUILD/kmod/igb_uio.ko
$DPDK_DIR/usertools/dpdk-devbind.py --status
sudo $DPDK_DIR/usertools/dpdk-devbind.py -b igb_uio 00:02.0 00:03.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let&amp;rsquo;s run the testpmd app, which will forward the traffic between two DPDK ports:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ./testpmd -n 4 --socket-mem 512 -- --burst=64 -i&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;This post describes how to setup OVS-DPDK with VM. I hope it will be found useful for anyone, who will need to run OVS-DPDK with KVM. With this setup I was able to achieve about 8.5 Mpps (~7.5 Gbps) for small (74 Bytes) packets on HP ProLiant DL380 Gen9 server with 2x Intel&amp;reg; Xeon&amp;reg; CPU E5-2650 v3 @ 2.30GHz and 128 GB RAM.&lt;/p&gt;

&lt;p&gt;If you have any question regarding the configuration process or you faced a problem to reproduce the steps don&amp;rsquo;t hesitate to contact me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Network prototyping made easy with P4 and Python!</title>
      <link>https://osinstom.github.io/post/2019-10-22-network-prototyping-made-easy-with-p4-and-python/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://osinstom.github.io/post/2019-10-22-network-prototyping-made-easy-with-p4-and-python/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Have you ever tried to understand deeply mechanisms of network protocols? I mean network protocols used by computer networks like, for example, Internet Protocol (IP), Transmission Control Protocol (TCP) or Spanning Tree Protocol (STP). Students are taught at unversity how network systems works. Nextly, they become network administrators, developers or architects. They know how to configure network devices, design complex systems or develop network algorithms. However, it is likely that they got their knowledge from books and/or administration courses, not from development practice! On the other hand, I think the best way to understand network paradigms quickly and deeply is to implement network mechanisms on your own. If as a student you get the deep knowledge about networking basics, it will be easier to understand novel technologies in the future. So far, it was required to use some low-level programming languages (C/C++) with thousands lines of code to build network‚Äôs prototype. And here comes the P4 technology and Python as a solution to prototype networks in the easy and fast way! Combining P4 with tools provided by Python such as the scapy library or Mininet gives unlimitied possibilities to implement, build and test complex network systems. Moreover, you can prototype network protocols, which don‚Äôt even exist yet!&lt;/p&gt;

&lt;h2 id=&#34;p4-python-scapy-and-mininet-the-toolset-of-network-researcher&#34;&gt;P4, Python (Scapy) and Mininet ‚Äì the toolset of network researcher&lt;/h2&gt;

&lt;p&gt;I assume you know already what the Python language is, but what is P4? P4 stands for Programming Protocol-Independent Packet Processors. It has been developed as a next step in the evolution of Software-Defined Networking (SDN). As you may know, the classical telecommunications architecture can be divided into data plane, control plane and management plane. Data plane is the layer, where data packets are being processed and forwarded, while the control plane decides how these packets should be handled. &lt;strong&gt;P4 has been designed to enable data plane programming.&lt;/strong&gt; Thus, using the P4 language you can specify what packet‚Äôs headers can be processed and what actions can be performed on packets. The data plane programming was the missing link in the software-based network systems, where control plane and management plane are programmable already. Currently, the structure of network system can be defined completely using software and its behaviour can be changed dynamically by updating the software version. It brings a lot of flexibility to the networking world!&lt;/p&gt;

&lt;p&gt;The main component of the P4 ecosystem is the P4 language. It is a high-level Domain-Specific Language (DSL) dedicated for programming of network devices. It allows to specify the format of packets (protocol‚Äôs headers) to be recognized by network devices and actions to be performed on incoming packets (forwarding, headers modification, adding protocol header, etc). Nevertheless, the P4 language is not consumed directly by the network device, but it must be compiled to the source code for particular platform. These platforms are hardware-based (e.g. Barefoot Tofino, &lt;a href=&#34;https://p4.org/p4/p4-netfpga-a-low-cost-solution-for-testing-p4-programs-in-hardware.html&#34; target=&#34;_blank&#34;&gt;FPGA&lt;/a&gt;) or software-based (e.g. &lt;a href=&#34;https://github.com/p4lang/behavioral-model&#34; target=&#34;_blank&#34;&gt;BMv2&lt;/a&gt;, &lt;a href=&#34;https://github.com/vmware/p4c-xdp&#34; target=&#34;_blank&#34;&gt;eBPF/XDP&lt;/a&gt; or &lt;a href=&#34;http://pisces.cs.princeton.edu/&#34; target=&#34;_blank&#34;&gt;PISCES&lt;/a&gt;). The goal of P4 is to become the same what CUDA language became for graphics cards programming. The concept of the P4 language has been presented below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{site.baseurl}}/static/img/p4-program-structure.jpg&#34; alt=&#34;P4 program structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The P4 program is composed of three main sections: Protocols defintion (data declaration), Parser Logic (Parser &amp;amp; Deparser) and a number of control blocks containing Match-Action tables. The first section defines the protocols headers that the network device will be able to recognize. For instance, defining IPv4 header is as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header ipv4_t {
    bit&amp;lt;4&amp;gt;    version;
    bit&amp;lt;4&amp;gt;    ihl;
    bit&amp;lt;8&amp;gt;    diffserv;
    bit&amp;lt;16&amp;gt;   totalLen;
    bit&amp;lt;16&amp;gt;   identification;
    bit&amp;lt;3&amp;gt;    flags;
    bit&amp;lt;13&amp;gt;   fragOffset;
    bit&amp;lt;8&amp;gt;    ttl;
    bit&amp;lt;8&amp;gt;    protocol;
    bit&amp;lt;16&amp;gt;   hdrChecksum;
    bit&amp;lt;32&amp;gt; srcAddr;
    bit&amp;lt;32&amp;gt; dstAddr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The programmer just needs to declare header fields and their length. That‚Äôs all. Now, these headers are used to parse incoming data and recognize type of packets. The Parser Logic is a state machine defining the steps to process to read and parse incoming packets. Graphically, the Parser Logic for simple IPv4 router looks like:&lt;/p&gt;

&lt;p&gt;While the P4 code implementing this logic is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parser RouterParser(packet_in packet,
                    out headers hdr,
                    inout metadata meta,
                    inout standard_metadata_t standard_metadata) {
     state start {
         transition parse_ethernet;
     }
     state parse_ethernet {
         packet.extract(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             TYPE_IPV4: parse_ipv4;
             default: accept;
          }
     }
     state parse_ipv4 {
         packet.extract(hdr.ipv4);
         transition accept;
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, in the P4 program programmer must define a number of control blocks, which contians Match-Action tables. The definition of simple IPv4 forwarding table can be implemented as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table routing_table {
    key = {
        hdr.ipv4.dstAddr: lpm;
    }
    actions = {
       ipv4_forward;
       drop;
       NoAction;
    }
    default_action = NoAction();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above routing_table reads the IPv4 destination IP address and matches it based on the Longest Prefix Match algorithm. Then, on packets matching the rule there can be three actions performed: ipv4_forward, drop or NoAction. If you would like to view the complete example of IP router written in P4 visit &lt;a href=&#34;https://github.com/osinstom/p4-demos/blob/master/ip-routing/p4include/router.p4&#34; target=&#34;_blank&#34;&gt;my GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, as I pointed out, the P4 language can be used to implement any type of data plane protocols. Although, &lt;a href=&#34;https://blogs.vmware.com/research/2017/04/07/programming-networks-p4/&#34; target=&#34;_blank&#34;&gt;it has some limitations&lt;/a&gt; it is a powerful technology that can be used by network researchers to prototype and test novel network protocols. Creativity is the limit! To learn more on P4, let‚Äôs visit:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.networkworld.com/article/3163496/cloud-computing/what-p4-programming-is-and-why-it-s-such-a-big-deal-for-software-defined-networking.html&#34; target=&#34;_blank&#34;&gt;What P4 programming is and why it‚Äôs such a big deal for Software-Defined Networking?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://p4.org/assets/P4_tutorial_01_basics.gslide.pdf&#34; target=&#34;_blank&#34;&gt;P4 tutorial ‚Äì presentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://cs344-stanford.github.io/deliverables/p4-mininet/&#34; target=&#34;_blank&#34;&gt;P4 tutorial from Stanford&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/p4lang/tutorials&#34; target=&#34;_blank&#34;&gt;P4 tutorials ‚Äì GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sigcomm.org/sites/default/files/ccr/papers/2014/July/0000000-0000004.pdf&#34; target=&#34;_blank&#34;&gt;P4: Programming Protocol-independent Packet Processors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, P4 gives the tool to program the data plane, but what about a control plane? In fact, you can use any language to listen to the packets being sent from data plane. However, I believe the most simple to use is Python. It comes with the library named scapy. Scapy allows you to parse network packets received on sockets as well as construct  new packets as simply as in the below example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; p = IP()/TCP()/&amp;quot;AAAA&amp;quot;
&amp;gt;&amp;gt;&amp;gt; p
&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; p.summary()
&#39;IP / TCP 127.0.0.1:ftp-data &amp;gt; 127.0.0.1:www S / Raw&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From my expierence Scapy is a user-friendly library that can be used to implement a control plane applications or generate custom packets from host devices. More on Scapy library you can read &lt;a href=&#34;https://scapy.readthedocs.io/en/latest/introduction.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The P4 language allows us to program data plane and Python is the recommended language to implement control plane of the prototyped network. Voila! Now, the question is how to emulate the real network at scale? The BMv2 switch, which is the reference P4 software switch, is well-integrated with &lt;a href=&#34;http://mininet.org/&#34; target=&#34;_blank&#34;&gt;Mininet&lt;/a&gt;. Thus, you can create a virtual network of any size on your local computer! I have used Mininet for almost four years to experiment with SDN and OpenFlow ‚Äì it is a very powerful tool that make life of network researcher easier!&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post I introduced useful tools for network researchers ‚Äì P4, Python (Scapy) and Mininet. These technologies make network prototyping easier than ever before! P4 allows to program data plane in tens or hundreds (instead of thousands) of lines of code. Python comes with Scapy library that simplifies programming operations on network packets. Finally, Mininet provides the tool to emulate a real network on your local computer by writing a simple Python script.&lt;/p&gt;

&lt;p&gt;In the subsequent blog posts I will describe how I have used these tools to learn network protocols/architectures and to prototype solutions. Stay tuned!&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;[1] W. L. Costa Cordeƒ±ro, J. A. Marques, and L. P. Gaspary, ‚ÄúData Plane Programmability Beyond OpenFlow: Opportunities and Challenges for Network and Service Operations and Management,‚Äù J. Netw. Syst. Manage., vol. 25, no. 4, pp. 784‚Äì818, Oct. 2017.&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&#34;http://www.p4.org&#34; target=&#34;_blank&#34;&gt;http://www.p4.org&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Initial view on VoWiFi in the 5G network</title>
      <link>https://osinstom.github.io/post/initial-view-on-vowifi-in-the-5g-network/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://osinstom.github.io/post/initial-view-on-vowifi-in-the-5g-network/</guid>
      <description>

&lt;p&gt;In this post I would like to make a quick review of how the VoWiFi (Voice over WiFi) architecture may change in future 5G deployments. I‚Äôm not 3GPP expert and don‚Äôt have any insider information from standardization groups, so this text will be based only on official 3GPP specifications and drafts. I hope this blog will be valuable for those engineers, who are currently working on EPC-based VoWiFi deployments and wants to prepare for upcoming evolutions in the area of VoWiFi.&lt;/p&gt;

&lt;p&gt;VoWiFi (or simply WiFi Calling) has gained a momentum as the novel Telco service for end users.
They can now make a phone calls via their own home WiFi Access Point.
This service is especially important for users being abroad as they can use WiFi Calling instead of making an expensive roaming calls.
Along with VoLTE, the IMS-based voice services may replace the old 2G/3G technology.&lt;/p&gt;

&lt;p&gt;An implementation of VoWiFi has become possible with the emergence of IP Multimedia Subsystem (IMS) and extensions to 3GPP LTE EPC architecture ‚Äì evolved Packet Gateway (ePDG) and the AAA server.
ePDG provides a secure gateway to operator‚Äôs network for users connected to untrusted WiFi access points.
It leverages IPSec with the EAP-AKA authentication method on SWu interface as the security protocol.
The AAA server provides security services for non-3GPP access. The ePDG is integrated with the rest of LTE.
It is connected to P-GW over S2b interface using GTP tunneling, while the AAA server is integrated with HSS over SWx and to PGW over S6b interface.
P-GW provides access for VoWiFi users to the IMS subsystem.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://osinstom.github.io/static/img/evolved_packet_core-svg.png&#34;&gt;
    &lt;figcaption&gt;Source: Wikipedia&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Although the 3GPP 5GSystem (5GS) specification is still in progress (&lt;a href=&#34;https://www.sdxcentral.com/articles/news/3gpp-delays-second-wave-of-5g-specs/2018/12/&#34; target=&#34;_blank&#34;&gt;the ‚ÄúSecond Wave‚Äù of 5G specs has been delayed&lt;/a&gt;), a functional architecture of 5G RAN and Core has been already defined and should not be changed significantly (&lt;a href=&#34;https://www.riverpublishers.com/journal/journal_articles/RP_Journal_2245-800X_615.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; you can find an introduction to the 5G system architecture). It‚Äôs already agreed that the VoWiFi architecture will need some changes to fulfill the requirements of 5G network. One of design pricinples that has been defined for 5G networks (TS 23.501), directly impacts the VoWiFi architecture:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúMinimize dependencies between the Access Network (AN) and the Core Network (CN). The architecture is defined with a converged core network
with a common AN ‚Äì CN interface which integrates different Access Types e.g. 3GPP access and non-3GPP access‚Äú&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As 5G System is expected to be access-agnostic the interface between RAN and Core should be common for access technologies. Moreover, UEs should be allowed to communicate with core network over the NAS (Non-Access Stratum) interface, regardless current point of attachment. The NAS interface is a well-known in 3GPP systems, but in the current EPC-based VoWiFi architecture UE does not perform any signalling over the NAS interface. The principle of converged core network with a common AN-CN interface causes the change in architectural design.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://osinstom.github.io/static/img/5g.png&#34;&gt;
    &lt;figcaption&gt;5G Core Network with non-3GPP access. Source: TS 23.501&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The 5G Core Network functions involved in the VoWiFi service are AMF, SMF, AUSF (control plane) and UPF (user plane). The Mobility Management Functions (MME) from 4G, which implements mobility, access and session management has been decomposed into AMF and SMF. AMF, which stands for Access and Mobility Function realizes access and mobility management functions, while SMF (Session Management Function) manages session connectivity. The decomposition is needed due to the emergence of new services (such as Internet of Things) requiring a differentiated session management. For instance, static IoT likely will not require session management and packets can be forwarded in the Best-Effort manner. Moreover, a control and user plane has been decoupled. Control plane functions has been moved from S-/P-GW to AMF and SMF. User plane functions (such as packet routing, forwarding, and encapsulation) are realized by UPF (User Plane Function).&lt;/p&gt;

&lt;p&gt;In the 5G System specification the successor of eDPG is called &lt;strong&gt;N3IWF (non-3GPP InterWorking Function)&lt;/strong&gt;. The functionality of N3IWF at high-level is almost the same as ePDG ‚Äì it provides a secure gateway to operator‚Äôs network for non-3GPP access technology. The interface between UE and N3IWF remains similar and is based on IPSec/IKE to establish a secure tunnel. As UE is expected to communicate with AMF over the NAS interface, there is a new N2 interface connecting N3IWF with AMF. Note that the N2 interface is considered to realized by a NG Application Protocol (NGAP) defined in TS 38.413.  N3IWF is responsible for setting up the IPSec connection to be used by control plane traffic directed to AMF. As a consequence &lt;strong&gt;UE and N3IWF need to establish two IPSec Security Associations (SAs)&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Signalling (control plane) IPSec SA&lt;/strong&gt; ‚Äì it transports NAS messages destined to AMF,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User plane IPSec SA&lt;/strong&gt; ‚Äì it transports  packets destined to IMS&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;signalling-control-plane-ipsec-sa&#34;&gt;Signalling (control plane) IPSec SA&lt;/h2&gt;

&lt;p&gt;In the first step, UE and N3IWF must establish a signalling IPSec SA, which is used to securely exchange NAS messages between UE and AMF. The NAS interface is further leveraged to register UE in the 5G system. The below figure presents a control plane protocol‚Äôs stack used to establish signalling IPSec SA. Similarly to ePDG, IKEv2 protocol is used to setup security associations. However, the new authentication method ‚Äì EAP-5G (or 5G AKA) ‚Äì is introduced. The EAP method is used to encapsulate NAS messages between UE and N3IWF. Note that specification says that EAP-5G is ‚Äúvendor-specific‚Äú.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://osinstom.github.io/static/img/VoWiFI5G_controlplane_before.jpg&#34;&gt;
    &lt;figcaption&gt;Signalling protocol‚Äôs stack before signalling IPSec SA is established&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When the signalling IPSec SA is established, the IPSec tunnel is configured to encapsulate NAS messages between UE and N3IWF. At this stage, UE can communicate with AMF to perform NAS signalling. It is presented in the figure below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://osinstom.github.io/static/img/VoWiFI5G_controlplane_after.jpg&#34;&gt;
    &lt;figcaption&gt;Signalling protocol‚Äôs stack when signalling IPSec SA is established&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;user-plane-ipsec-sa&#34;&gt;User plane IPSec SA&lt;/h2&gt;

&lt;p&gt;When UE is registered in the 5G system (via NAS interface) it can establish a new child IPSec SA (called user plane IPSec SA) to communicate with the IMS system. The procedure for establishing user plane IPSec SA is also supported by AMF.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://osinstom.github.io/static/img/VoWiFI5G_controlplane_userplane_establishment.jpg&#34;&gt;
    &lt;figcaption&gt;User plane protocol‚Äôs stack to establish user plane IPSec SA&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If IKEv2 procedure is finished, UE can communicate with P-CSCF (IMS gateway). A user plane protocol‚Äôs stack is depicted in the figure below. There are two main differences in comparison to the ePDG-based architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The GRE (Generic Routing Encapsulation) protocol has been introduced to carry user data packets between UE and N3IWF. GRE allows to implement a flow-based QoS model as specified in TS 23.501. The GRE header carries QFI (QoS Flow Identifier) associated with user data packets. Optionally, N3IWF can indicate Reflective QoS Identifier (RQI). More on QoS in 5G networks &lt;a href=&#34;https://www.linkedin.com/pulse/learn-qos-5g-networks-paul-shepherd/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The new N3 interface between N3IWF and UPF. This interface is considered to be implemented based on GTPv2.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://osinstom.github.io/static/img/VoWiFI5G_userplane.jpg&#34;&gt;
    &lt;figcaption&gt;User plane protocol‚Äôs stack to transport user data packets&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post I have made a quick review of the current status of work on non-3GPP access part of the 5G network. I have presented a general architecture and protocols used to implement VoWiFi in the 5G system.&lt;/p&gt;

&lt;p&gt;Although the 5G specification is not completed yet, some design choices have been already made. The major changes to the VoWiFi architecture are applied on the 3GPP network side. The Non-3GPP InterWorking Function (N3IWF) has been introduced as a successor of ePDG. Generally,  enhancements to the VoWiFi architecture can be summarized as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Common NAS&lt;/strong&gt; ‚Äì the VoWiFi architecture has been extended with a support for NAS signalling between UE and AMF (the successor of MME). It means that UE and N3IWF establishes two IPSec SAs. Signalling IPSec SA transports NAS messages, while user plane IPSec SA carries packets (e.g. SIP signalling) destined to IMS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modified authentication method&lt;/strong&gt; ‚Äì the procedure establishing the IPSec tunnel is based on new authentication method ‚Äì 5G AKA.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protocol enhancements&lt;/strong&gt; ‚Äì the EAP-5G protocol is used to encapsulate NAS messages between UE and N3IWF. Additionally, the GRE protocol is used to encapsulate user-plane traffic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;[1] 3GPP TS 23.501&lt;/p&gt;

&lt;p&gt;[2] 3GPP TS 24.502&lt;/p&gt;

&lt;p&gt;[3] &lt;a href=&#34;https://docbox.etsi.org/workshop/2018/201806_ETSISECURITYWEEK/5G/S01_INPUT_TO_5G/5G_ENHANCEMENTS_NON3GPP_ACCSEC_LENOVO_KUNZ.pdf&#34; target=&#34;_blank&#34;&gt;5G Enhancements to Non ‚Äì 3GPP Access Security&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
